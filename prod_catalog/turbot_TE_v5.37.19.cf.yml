AWSTemplateFormatVersion: "2010-09-09"

Description: Turbot Enterprise 5.37.19

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:

      - Label:
          default: Advanced - Foundation Parameters
        Parameters:
          - TurbotVpcSsmValue
          - KeyAliasSsmValue
          - LogBucketSsmValue
          - RegionsSsmValue
          - InstallationDomainSsmValue
          - DatabaseSecurityGroupSsmValue
          - OutboundInternetSecurityGroupSsmValue
          - LdapSecurityGroupSsmValue
          - LoadBalancerSecurityGroupSsmValue
          - UseCustomOutboundInternetSecurityGroup
          - LogRetentionDaysSsmValue

          - LoadBalancerSchemeSsmValue
          - InboundTrafficCidrSsmValue

          - ApiDesiredScaleSsmValue
          - ApiMinScalingSsmValue
          - ApiMaxScalingSsmValue

          - CertificateArnSsmValue
          - ManagedRoute53SsmValue
          - LoadbalancerSubnetIdsSsmValue
          - TurbotSubnetIdsSsmValue

          - HttpProxySsmValue
          - HttpsProxySsmValue
          - NoProxySsmValue
          - AllowSelfSignedCertificateSsmValue
          - FlagsSsmValue
          - AlphaRegionSsmValue
          - ElastiCacheSsmValue
          - ModLambdaMaxMemorySsmValue
          - ModLambdaMaxTimeoutSsmValue

          - WorkerLambdaReservedConcurrencySsmValue
          - WorkerLambdaMessageBatchSsmValue
          - WorkerLambdaMemorySizeSsmValue
          - WorkerLambdaTimeoutSsmValue
          - WorkerLambdaMaxDBConnectionsSsmValue

          - OSGuardrailsSsmValue

      - Label:
          default: Advanced - TEF Overrides
        Parameters:
          - TurbotVpcId
          - FoundationKeyAlias
          - FoundationLogBucket
          - FoundationRegions
          - FoundationInstallationDomain
          - FoundationDatabaseSecurityGroup
          - FoundationOutboundInternetSecurityGroup
          - FoundationLoadBalancerSecurityGroup

          - LogRetentionDays

          - LoadBalancerScheme
          - InboundTrafficCidr

          - WorkerLambdaReservedConcurrency
          - WorkerLambdaMessageBatch
          - WorkerLambdaMemorySize
          - WorkerLambdaTimeout
          - WorkerLambdaMaxDBConnections

          - OSGuardrails

          - ModLambdaMaxMemory
          - ModLambdaMaxTimeout

          - WorkerRetryLambdaReservedConcurrency

          - APIContainerReplicaMaxDBConnections

          - EventsRetryCount

          - EventsDlqLambdaReservedConcurrency
          - EventsDlqMessageBatch

          - ApiDesiredScale
          - ApiMinScaling
          - ApiMaxScaling

          - TurbotCertificateArn
          - VersionDomainInRoute53
          - TurbotLoadBalancerSubnetIds
          - TurbotApplicationSubnetIds

          - FoundationEnvHttpProxy
          - FoundationEnvHttpsProxy
          - FoundationEnvNoProxy

      - Label:
          default: Advanced - Deployment
        Parameters:
          - ResourceNamePrefix
          - ReleasePhase
          - RoleCreationScheme
          - ParameterDeploymentTrigger

    ParameterLabels:
      # Network

      TurbotApplicationSubnetIds:
        default: Turbot Application Subnet IDs
      TurbotLoadBalancerSubnetIds:
        default: Turbot Load Balancer Subnet IDs
      TurbotCertificateArn:
        default: Turbot Certificate ARN

      # Worker Lambda
      WorkerLambdaReservedConcurrency:
        default: Worker Lambda Reserved Concurrency

      WorkerLambdaMaxDBConnections:
        default: Maximum DB Connections per Worker Lambda instance

      WorkerRetryLambdaReservedConcurrency:
        default: Worker Retry Lambda Reserved Concurrency

      APIContainerReplicaMaxDBConnections:
        default: API Container replica max DB connections

      WorkerLambdaMessageBatch:
        default: Worker Lambda messages per batch

      WorkerLambdaMemorySize:
        default: Worker Lambda memory size

      WorkerLambdaTimeout:
        default: Worker Lambda timeout

      EventsRetryCount:
        default: Events Retry Count

      EventsDlqLambdaReservedConcurrency:
        default: Events DLQ Lambda Handler Reserved Concurrency

      EventsDlqMessageBatch:
        default: Events DLQ Lambda Handler messages per batch

      ApiDesiredScale:
        default: API Desired Scale Size
      ApiMinScaling:
        default: API Minimum Scale Size
      ApiMaxScaling:
        default: API Maximum Scale Size

      # OS Guardrails
      OSGuardrails:
        default: OS Guardrails

      # Logging
      LogRetentionDays:
        default: Log Retention Days

      # Advanced - Load Balancer
      LoadBalancerScheme:
        default: Load Balancer Scheme
      InboundTrafficCidr:
        default: CIDR for Load Balancer inbound access from Clients / Users



      # Advanced - Foundation Overrides
      TurbotVpcId:
        default: Turbot VPC ID
      FoundationKeyAlias:
        default: Key Alias
      FoundationLogBucket:
        default: Log Bucket Name
      FoundationRegions:
        default: Regions
      FoundationInstallationDomain:
        default: Installation Domain
      VersionDomainInRoute53:
        default: Version Domain Alias in Route 53
      FoundationDatabaseSecurityGroup:
        default: Database Security Group
      FoundationOutboundInternetSecurityGroup:
        default: Outbound Internet Security Group
      FoundationLoadBalancerSecurityGroup:
        default: Load Balancer Security Group
      FoundationEnvHttpProxy:
        default: HTTP_PROXY
      FoundationEnvHttpsProxy:
        default: HTTPS_PROXY
      FoundationEnvNoProxy:
        default: NO_PROXY
      ElastiCacheSsmValue:
        default: ElastiCache Flag
      ModLambdaMaxMemory:
        default: Mod Lambda's Maximum Memory
      ModLambdaMaxTimeout:
        default: Mod Lambda's Maximum Timeout (in seconds)

########################################################

      # Advanced - Foundation parameters



      TurbotSubnetIdsSsmValue:
        default: Turbot Application Subnet IDs Parameter
      LoadbalancerSubnetIdsSsmValue:
        default: Turbot Load Balancer Subnet IDs Parameter
      CertificateArnSsmValue:
        default: Turbot Certificate ARN Parameter

      ApiDesiredScaleSsmValue:
        default: API Desired Scale Size Parameter
      ApiMinScalingSsmValue:
        default: API Minimum Scale Size Parameter
      ApiMaxScalingSsmValue:
        default: API Maximum Scale Size Parameter

      # Logging
      LogRetentionDaysSsmValue:
        default: Log Retention Days Parameter

      # Advanced - Load Balancer
      LoadBalancerSchemeSsmValue:
        default: Load Balancer Scheme Parameter
      InboundTrafficCidrSsmValue:
        default: CIDR for Load Balancer inbound access from Clients / Users Parameter



      # Advanced - Foundation
      TurbotVpcSsmValue:
        default: Turbot VPC ID Parameter
      KeyAliasSsmValue:
        default: Key Alias Parameter
      LogBucketSsmValue:
        default: Log Bucket Name Parameter
      RegionsSsmValue:
        default: Regions Parameter
      InstallationDomainSsmValue:
        default: Installation Domain Parameter
      ManagedRoute53SsmValue:
        default: Manage DNS records in Route 53 Parameter
      DatabaseSecurityGroupSsmValue:
        default: Database Security Group Parameter
      ModLambdaMaxMemorySsmValue:
        default: Mod Lambda Maximum Memory Parameter
      ModLambdaMaxTimeoutSsmValue:
        default: Mod Lambda Maximum Timeout Parameter

      WorkerLambdaReservedConcurrencySsmValue:
        default: Worker Lambda Reserved Concurrency Parameter
      WorkerLambdaMessageBatchSsmValue:
        default: Worker Lambda Message Batch Parameter
      WorkerLambdaMemorySizeSsmValue:
        default: Worker Lambda Memory Size Parameter
      WorkerLambdaTimeoutSsmValue:
        default: Worker Lambda Timeout Parameter
      WorkerLambdaMaxDBConnectionsSsmValue:
        default: Worker Lambda Max DB Connections Parameter

      OSGuardrailsSsmValue:
        default: OS Guardrails Parameter

      HttpProxySsmValue:
        default: HTTP_PROXY SSM Parameter
      HttpsProxySsmValue:
        default: HTTPS_PROXY SSM Parameter
      NoProxySsmValue:
        default: NO_PROXY SSM Parameter

      AllowSelfSignedCertificateSsmValue:
        default: Allow Self-Signed Certificate Ssm Value Parameter
      FlagsSsmValue:
        default: Flags SSM Value Parameter
      AlphaRegionSsmValue:
        default: Alpha Region SSM Value Parameter

      # Advanced - Security Groups
      OutboundInternetSecurityGroupSsmValue:
        default: Outbound Security Group Parameter
      LdapSecurityGroupSsmValue:
        default: LDAP Security Group Parameter
      LoadBalancerSecurityGroupSsmValue:
        default: Load Balancer Security Group Parameter
      UseCustomOutboundInternetSecurityGroup:
        default: Custom Outbound Security Group Parameter

      # Deployment
      ResourceNamePrefix:
        default: Resource Name Prefix
      ReleasePhase:
        default: Release Stream
      RoleCreationScheme:
        default: Role Creation Scheme
      ParameterDeploymentTrigger:
        default: Parameter Deployment Trigger

Parameters:

  #
  # Environment
  #
  TurbotApplicationSubnetIds:
    Description: |
      Subnets where Turbot is running.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    #Type: List<AWS::EC2::Subnet::Id>
    Type: CommaDelimitedList

  TurbotLoadBalancerSubnetIds:
    Description: |
      Subnets where Turbot will run the load balancer. May be public facing, internal facing, and can be identical to the Internal Subnet IDs.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    #Type: List<AWS::EC2::Subnet::Id>
    Type: CommaDelimitedList

  TurbotCertificateArn:
    Description: |
      ACM certificate to be used in this region.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String
    #AllowedPattern: "^arn:aws:acm:.*$"

  VersionDomainInRoute53:
    Description: |
      If enabled, a version alias domain record will be created using Route 53
      for the installation domain zone. Set to Disabled if using a custom DNS
      approach to versions.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Default: ""
    Type: String
    AllowedValues:
      - Enabled
      - Disabled
      - ""

  # Advanced - Lambda functions
  WorkerLambdaReservedConcurrency:
    Description: |
      Maximum parallel invocation for Worker Lambda function. This is the Lambda function to process messages from the event queue. By default, this parameter is 0 and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: Number
    Default: 0

  WorkerRetryLambdaReservedConcurrency:
    Description: |
      Maximum parallel invocation for Worker Retry Lambda function. This is the Lambda function to process messages from the event retry queue.
    Type: Number
    Default: 2

  WorkerLambdaMaxDBConnections:
    Description: |
      Maximum DB connections per Worker Lambda function. The higher the connections the quicker Postgres will max out the connections, but too low settings
      will increase the chances of timeouts in acquiring the connections. By default, this parameter is 0 and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: Number
    Default: 0

  APIContainerReplicaMaxDBConnections:
    Description: |
      Maximum DB connections per API Container to connect to the replica database. The higher the connections the quicker Postgres will max out the connections, but too low settings
      will increase the chances of timeouts in acquiring the connections.
    Type: Number
    Default: 50


  WorkerLambdaMessageBatch:
    Description: |
      Maximum of number of messages per batch. SQS deliver messages in a batch to the Worker Lambda function, this parameter
      controls how many message per batch. By default, this parameter is 0 and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: Number
    Default: 0

  WorkerLambdaMemorySize:
    Description: |
      Memory size of the worker lambda. By default, this parameter is 0 and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: Number
    Default: 0

  WorkerLambdaTimeout:
    Description: |
      Worker Lambda timeout. In seconds. By default, this parameter is 0 and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: Number
    Default: 0

  EventsRetryCount:
    Type: Number
    Default: 3

  EventsDlqLambdaReservedConcurrency:
    Description: |
      Maximum parallel invocation for Events DLQ Lambda function. This is the Lambda function to process messages from the event DLQ.
    Type: Number
    Default: 3

  EventsDlqMessageBatch:
    Type: Number
    Default: 1

  #
  # OS Guardrails
  #

  OSGuardrails:
    Description: |
      OS Guardrails.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Default: ""
    Type: String
    AllowedValues:
      - ansible
      - off
      - ""

  #
  # Advanced - Cluster Scaling
  #

  ApiDesiredScale:
    Description: |
      The number of simultaneous API tasks that you want to run on the cluster.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String
    AllowedPattern: "(^\\s*$|^\\d{1,2}$)"
    Default: ""

  ApiMinScaling:
    Description: |
      The minimum value that API Auto Scaling can use to scale a target during a scaling activity.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String
    AllowedPattern: "(^\\s*$|^\\d{1,2}$)"
    Default: ""

  ApiMaxScaling:
    Description: |
      The maximum value that API Auto Scaling can use to scale a target during a scaling activity.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String
    AllowedPattern: "(^\\s*$|^\\d{1,2}$)"
    Default: ""

  #
  # Advanced - Load Balancer
  #

  LoadBalancerScheme:
    Description: |
      Determines if the load balancer is internal or internet facing. If
      internet-facing then the load balancer subnets must be "public". Otherwise,
      the subnets should be "turbot".
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String
    Default: ""
    AllowedValues:
      - internet-facing
      - internal
      - ""

  InboundTrafficCidr:
    Description: >
      CIDR range for inbound traffic to the Turbot load balancer (i.e. end
      users). Typically 0.0.0.0/0, but may be updated for environments with
      limited access requirements.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String
    Default: ""
    AllowedPattern: "(^\\s*$|^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/[0-9]{1,2}$)"

    #Allowed
  #
  # Advanced - Logging
  #

  LogRetentionDays:
    Description: |
      Days to retain logs for API and worker processing.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String
    Default: ""
    AllowedValues:
      - ""
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653

  #
  # Foundation
  #


  TurbotVpcId:
    Description: >
      VPC where Turbot is running.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String

    Default: ""

  FoundationKeyAlias:
    Description: >
      The transient KMS key alias used for SQS, SNS and other services that require encryption.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String
    Default: ""

  FoundationLogBucket:
    Description: >
      The log bucket is used by various services to log activity across versions.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String
    Default: ""

  FoundationRegions:
    Description: >
      A comma separated list of the regions where the Turbot installation is
      actively running.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: CommaDelimitedList
    Default: ""

  FoundationInstallationDomain:
    Description: >
      Base domain name for the installation. For example, cloud.turbot.com.
      Workspaces will be setup as subdomains of the InstallationDomain in the
      formation <workspace>-<identity>.<InstallationDomain>. For example,
      ws-acme.cloud.turbot.com.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String
    Default: ""

  FoundationDatabaseSecurityGroup:
    Description: >
      Database security group that allows access to the database.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String
    Default: ""

  FoundationOutboundInternetSecurityGroup:
    Description: >
      A security group that allows outbound internet access.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String
    Default: ""

  FoundationLoadBalancerSecurityGroup:
    Description: >
      A security group that allows access to Load Balancer.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: String
    Default: ""

  FoundationEnvHttpProxy:
    Description: >
      HTTP_PROXY configuration used by the Turbot application containers for
      HTTP requests, e.g. http://internal.proxy.com:2011.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
      Note: controls and calculated policies running in Lambda functions do not use
      the proxy configuration since they are outside the VPC.
    Type: String
    Default: ""


  FoundationEnvHttpsProxy:
    Description: >
      HTTPS_PROXY configuration used by the Turbot application containers for
      HTTPS requests, e.g. https://internal.proxy.com:2011 or
      http://internal.proxy.com:2011.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
      Note: controls and calculated policies running in Lambda functions do not use
      the proxy configuration since they are outside the VPC.
    Type: String
    Default: ""

  FoundationEnvNoProxy:
    Description: >
      HTTPS_PROXY configuration used by the Turbot application containers for
      HTTPS requests, e.g. https://internal.proxy.com:2011 or
      http://internal.proxy.com:2011.
      By default, this parameter is blank and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
      Note: controls and calculated policies running in Lambda functions do not use
      the proxy configuration since they are outside the VPC.
    Type: String
    Default: ""

  ModLambdaMaxMemory:
    Description: >
      Maximum memory limit for Mod's lambda functions.
      By default, this parameter is 0 and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: Number
    Default: 0

  ModLambdaMaxTimeout:
    Description: >
      Maximum timeout limit, in seconds, for Mod's lambda functions.
      By default, this parameter is 0 and will use the SSM parameter as defined in the TEF stack - ONLY CHANGE THIS IF YOU KNOW WHAT YOU'RE DOING!
    Type: Number
    Default: 0

  #
  # Deployment
  #

  ResourceNamePrefix:
    Description: >
      Prefix to be added to all Turbot resources - This MUST match the Turbot
      Enterprise Foundation Resource Name Prefix!!! The suffix added in resource
      creation starts with a - or _, e.g. {prefix}_resource_detail or
      {prefix}-resource-detail.
    Type: String
    Default: turbot
    AllowedPattern: "^[a-z][a-z0-9]*$"

  ReleasePhase:
    Description: >
      DO NOT MODIFY. Portfolio lifecycle phase for deployment. Defines the
      artifacts to be used for this deployment.
    Type: String
    AllowedValues:
      - development
      - staging
      - production
    Default: production


  #
  # SSM Parameters
  #

  ElastiCacheSsmValue:
    Description: >
      Name of the SSM Parameter that contains the TEF ElastiCache flag.
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/use_elasticache"

  HttpProxySsmValue:
    Description: >
      Name of the SSM Parameter that contains the HTTP_PROXY settings, as configured
      by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/http_proxy"

  HttpsProxySsmValue:
    Description: >
      Name of the SSM Parameter that contains the HTTPS_PROXY settings, as configured
      by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/https_proxy"

  NoProxySsmValue:
    Description: >
      Name of the SSM Parameter that contains the NO_PROXY settings, as configured
      by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/no_proxy"

  TurbotVpcSsmValue:
    Description: >
      VPC ID of the Turbot VPC, as configured by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/vpc"

  RegionsSsmValue:
    Description:
       Comma separated list of the regions where Turbot is operating.
       YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<CommaDelimitedList>"
    Default: "/turbot/enterprise/regions"

  KeyAliasSsmValue:
    Description: |
       Transient KMS Key alias defined in Turbot Enterprise Foundation.
       YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/transient_key_alias"

  LogBucketSsmValue:
    Description: |
       Logging bucket defined in Turbot Enterprise Foundation
       YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/log_bucket"

  InstallationDomainSsmValue:
    Description:
      Base domain name for the installation. For example cloud.turbot.com.
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/installation_domain"

  DatabaseSecurityGroupSsmValue:
    Description:
       Database Security Group defined in Turbot Enterprise Foundation.
       YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/db_security_group"

  OutboundInternetSecurityGroupSsmValue:
    Description: >
      A security group rule to be added to the Egress Rules for all turbot containers and VPC lambda functions,
      as configured by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/outbound_internet_security_group"

  # If user wants LDAP enabled, irrespective of whether or not they want to use the security group created by turbot,
  # they would enter their LDAP Server Cidr in TEF, which will create a sg by default and the sg id will be stored in
  # the default parameter, if user then wants to override it, they can create their own sg and store the value in the
  # override parameter. But if the user doesn't want LDAP enabled, then they should leave the LDAP Server Cidr blank,
  # this will cause the default parameter to store {% NULL %} as the value.

  LdapSecurityGroupSsmValue:
    Description: >
      LDAP security group configured in the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/default/enterprise/ldap_security_group"

  LoadBalancerSecurityGroupSsmValue:
    Description: >
      A security group rule to be added to the Egress Rules for all turbot containers and VPC lambda functions,
      as configured by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/load_balancer_security_group"

  CertificateArnSsmValue:
    Description: >
      ACM Certificate to be used in this region.
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/certificate_arn"

  ManagedRoute53SsmValue:
    Description: >
      If enabled, a version alias domain record will be created using Route 53
      for the installation domain zone. Set to Disabled if using a custom DNS
      approach to versions.
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/managed_route53"

  LoadbalancerSubnetIdsSsmValue:
    Description: >
      Subnets where Turbot will run the load balancer. May be public facing, internal facing,
      and can be identical to the Internal Subnet IDs.
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<CommaDelimitedList>"
    Default: "/turbot/enterprise/loadbalancer_subnets"

  TurbotSubnetIdsSsmValue:
    Description: >
      Subnets where Turbot is running.
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<CommaDelimitedList>"
    Default: "/turbot/enterprise/turbot_subnets"

  LogRetentionDaysSsmValue:
    Description: >
      Days to retain logs for API and worker processing..
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/log_retention_days"

  LoadBalancerSchemeSsmValue:
    Description: |
      Determines if the load balancer is internal or internet facing. If
      internet-facing then the load balancer subnets must be "public". Otherwise,
      the subnets should be "turbot".
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/load_balancer_scheme"

  InboundTrafficCidrSsmValue:
    Description: >
      CIDR range for inbound traffic to the Turbot load balancer (i.e. end
      users). Typically 0.0.0.0/0, but may be updated for environments with
      limited access requirements.
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/load_balancer_inbound_cidr"

  ApiDesiredScaleSsmValue:
    Description: |
      The number of simultaneous API tasks that you want to run on the cluster.
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/api_desired_scale"

  ApiMinScalingSsmValue:
    Description: |
      The minimum value that API Auto Scaling can use to scale a target during a scaling activity
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/api_min_scale"

  ApiMaxScalingSsmValue:
    Description: |
      The maximum value that API Auto Scaling can use to scale a target during a scaling activity.
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/api_max_scale"

  UseCustomOutboundInternetSecurityGroup:
    Description: >
      Name of the SSM Parameter that contains the use custom outbound internet security group parameter settings, as configured
      by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/use_custom_outbound_internet_security_group"

  AllowSelfSignedCertificateSsmValue:
    Description: >
      Name of the SSM Parameter that contains the Allow Self Signed Certificate set by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/allow_self_signed_certificate"

  FlagsSsmValue:
    Description: >
      Name of the SSM Parameter that contains the Flags set by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/flags"

  AlphaRegionSsmValue:
    Description: >
      Name of the SSM Parameter that contains the Alpha Region set by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/alpha_region"

  ModLambdaMaxMemorySsmValue:
    Description: >
      Name of the SSM Parameter that contains the Mod Lambda's Maximum Memory limit set by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/mod_lambda_max_memory"

  ModLambdaMaxTimeoutSsmValue:
    Description: >
      Name of the SSM Parameter that contains the Mod Lambda's Maximum Timeout limit set by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/mod_lambda_max_timeout"

  WorkerLambdaReservedConcurrencySsmValue:
    Description: >
      Name of the SSM Parameter that contains the Worker Lambda's Reserved Concurrency set by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/worker_lambda_reserved_concurrency"

  WorkerLambdaMessageBatchSsmValue:
    Description: >
      Name of the SSM Parameter that contains the Worker Lambda's Message Batch set by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/worker_lambda_message_batch"

  WorkerLambdaMemorySizeSsmValue:
    Description: >
      Name of the SSM Parameter that contains the Worker Lambda's Memory Size set by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/worker_lambda_memory_size"

  WorkerLambdaTimeoutSsmValue:
    Description: >
      Name of the SSM Parameter that contains the Worker Lambda's Timeout set by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/worker_lambda_timeout"

  WorkerLambdaMaxDBConnectionsSsmValue:
    Description: >
      Name of the SSM Parameter that contains the Worker Lambda's Maximum Database Connection set by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/worker_lambda_max_db_connections"

  OSGuardrailsSsmValue:
    Description: >
      Name of the SSM Parameter that contains the OS Guardrails option set by the Turbot Enterprise Foundation Stack (TEF).
      YOU SHOULD ONLY CHANGE THIS PARAMETER IF YOU USED A NON-DEFAULT PREFIX IN THE TEF STACK
    Type: "AWS::SSM::Parameter::Value<String>"
    Default: "/turbot/enterprise/os_guardrails"

  ParameterDeploymentTrigger:
    Description: >
      Changes to SSM parameter overrides (e.g. IAM role ARNs) are not automatically detected by CloudFormation.
      Upgrades will recalculate the parameters, but if you wish to refresh you parameters without upgrading you can toggle this parameter.
      Simply changing it is enough to force the parameters to be re-read and recalculated.
    Type: String
    Default: Blue
    AllowedValues:
      - Blue
      - Green

  RoleCreationScheme:
    Description: >
      Allow TE to create IAM Roles.
    Type: String
    AllowedValues:
      - All
      - None
    Default: All

Mappings:

  Constants:
    Turbot:
      EntityName: Turbot HQ Inc
    Product:
      Name: Turbot Enterprise
      Version: 5.37.19

    Portfolio:
      AccountId: "054892787221"
      GovCloudAccountId: "491412691920"

    RequiredVersions:
      TEPreviousWorkspaceVersion: 5.30.2
      TEF: 1.33.0
      TED: 1.9.1


Conditions:

  IsUsEast1: !Equals [!Ref "AWS::Region", "us-east-1"]
  IsGovCloud: !Equals [ !Ref "AWS::Partition", "aws-us-gov"]
  CreateRoles: !Equals [!Ref RoleCreationScheme, "All"]

  UseElastiCache: !Equals [!Ref ElastiCacheSsmValue, "true"]

  ManageVersionDomainInRoute53: !Or
    - !Equals [ !Ref VersionDomainInRoute53, "Enabled" ]
    - !And
      - !Equals [ !Ref VersionDomainInRoute53, "" ]
      - !Equals [ !Ref ManagedRoute53SsmValue, "Enabled" ]

  ImportFoundationKeyAlias: !Equals [ !Ref FoundationKeyAlias, "" ]
  ImportFoundationLogBucket: !Equals [ !Ref FoundationLogBucket, "" ]
  ImportFoundationRegions: !Equals [ !Select [0, !Ref FoundationRegions], "" ]
  ImportFoundationInstallationDomain: !Equals [ !Ref FoundationInstallationDomain, "" ]
  ImportFoundationDatabaseSecurityGroup: !Equals [ !Ref FoundationDatabaseSecurityGroup, "" ]
  UseFoundationOutboundInternetSecurityGroup: !Equals [ !Ref FoundationOutboundInternetSecurityGroup, "" ]
  UseFoundationLoadBalancerSecurityGroup: !Equals [ !Ref FoundationLoadBalancerSecurityGroup, "" ]
  UseCustomOutboundInternetSecurityGroup: !Equals [ !Ref UseCustomOutboundInternetSecurityGroup, "true" ]
  IsLdapSecurityGroupDefined: !Not [ !Equals [ !Ref LdapSecurityGroupSsmValue, "{% NULL %}"] ]

  UseModLambdaMaxMemorySsmValue: !Equals [ !Ref ModLambdaMaxMemory, 0 ]
  UseModLambdaMaxTimeoutSsmValue: !Equals [ !Ref ModLambdaMaxTimeout, 0 ]

  UseWorkerLambdaReservedConcurrencySsmValue: !Equals [ !Ref WorkerLambdaReservedConcurrency, 0 ]
  UseWorkerLambdaMaxDBConnectionsSsmValue: !Equals [ !Ref WorkerLambdaMaxDBConnections, 0 ]
  UseWorkerLambdaMessageBatchSsmValue: !Equals [ !Ref WorkerLambdaMessageBatch, 0 ]
  UseWorkerLambdaMemorySizeSsmValue: !Equals [ !Ref WorkerLambdaMemorySize, 0 ]
  UseWorkerLambdaTimeoutSsmValue: !Equals [ !Ref WorkerLambdaTimeout, 0 ]

  UseOSGuardrailsSsmValue: !Equals [ !Ref OSGuardrails, "" ]

  CreateOutboundInternetSecurityGroup: !And
    - !Not [!Condition UseCustomOutboundInternetSecurityGroup]
    - !Condition UseFoundationOutboundInternetSecurityGroup

  AllowUseOfSelfSignedCertificate: !Equals [ !Ref AllowSelfSignedCertificateSsmValue, "true" ]

  ImportTurbotVpcId: !Equals [ !Ref TurbotVpcId, "" ]

  ImportCertificateArn: !Equals [ !Ref TurbotCertificateArn, "" ]
  ImportLoadbalancerSubnetIdsSsmValue: !Equals [ !Select [0, !Ref TurbotLoadBalancerSubnetIds], "" ]
  ImportTurbotSubnetIdsSsmValue: !Equals [ !Select [0, !Ref TurbotApplicationSubnetIds], "" ]

  ImportLogRetentionDays: !Equals [ !Ref LogRetentionDays, "" ]

  ImportLoadBalancerScheme: !Equals [ !Ref LoadBalancerScheme, "" ]
  ImportInboundTrafficCidr: !Equals [ !Ref InboundTrafficCidr, "" ]

  ImportApiDesiredScale: !Equals [ !Ref ApiDesiredScale, "" ]
  ImportApiMinScaling: !Equals [ !Ref ApiMinScaling, "" ]
  ImportApiMaxScaling: !Equals [ !Ref ApiMaxScaling, "" ]

  ImportHttpProxySsmValue: !And
    - !Equals [ !Ref FoundationEnvHttpProxy, "" ]
    - !Not [ !Equals [ !Ref HttpProxySsmValue, "null" ] ]

  ImportHttpsProxySsmValue: !And
    - !Equals [ !Ref FoundationEnvHttpsProxy, "" ]
    - !Not [ !Equals [ !Ref HttpsProxySsmValue, "null" ] ]

  ImportNoProxySsmValue: !And
    - !Equals [ !Ref FoundationEnvNoProxy, "" ]
    - !Not [ !Equals [ !Ref NoProxySsmValue, "null" ] ]


Resources:

  #
  # Installed versions parameter - for easy lookup in SSM rather than going through
  # the task definition in ECS
  #
  TEVersionSsmParamter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub
        - "/${ResourceNamePrefix}/enterprise/versions/${Version}"
        - Version: !FindInMap [Constants, Product, Version]
      Description: "TE version"
      Type: String
      Value: !FindInMap [Constants, Product, Version]

  IamParametersStack:
    Type: AWS::CloudFormation::Stack
    DependsOn:
      - PreinstallCheck
    Properties:
      TemplateURL: !Sub
        - https://turbot-software-${ReleasePhase}-${AWS::Region}.${S3Domain}.${AWS::URLSuffix}/te/${Version}/params-iam.yml
        - Version: !FindInMap [Constants, Product, Version]
          S3Domain: !If
          - IsUsEast1
          - s3
          - !Sub s3-${AWS::Region}
      Parameters:
        ResourceNamePrefix: !Ref ResourceNamePrefix
        TeVersion: !FindInMap [Constants, Product, Version]
        PortfolioAccount: !If
          - IsGovCloud
          - !FindInMap [Constants, Portfolio, GovCloudAccountId]
          - !FindInMap [Constants, Portfolio, AccountId]
        RoleCreationScheme: !Ref RoleCreationScheme
        ReleasePhase: !Ref ReleasePhase
        ParentStackId: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]
        EventsQueueArn: !GetAtt EventsQueue.Arn
        EventsRetryQueueArn: !GetAtt EventsRetryQueue.Arn
        EventsDeadLetterQueueArn: !GetAtt EventsDeadLetterQueue.Arn
        SoftwareBucketArn: !GetAtt [S3BucketArnList, "_turbot-software_/te/*_"]
        LogBucketArn: !GetAtt [S3BucketArnList, "_log_process-log_hive_"]
        LogBucketArnTempContents: !GetAtt [S3BucketArnList, "_log_hive_/temp/*_"]
        ProcessLogBucketArnContents: !GetAtt [S3BucketArnList, "_process-log_/*_"]
        LogBucketArnAllContents: !GetAtt [S3BucketArnList, "_log_process-log_hive_/*_"]

  #
  # LOGGING
  #

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PreinstallCheck
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub
        - "/${ResourceNamePrefix}/${SafeVersion}/api"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RetentionInDays: !If
        - ImportLogRetentionDays
        - !Ref LogRetentionDaysSsmValue
        - !Ref LogRetentionDays

  EventLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PreinstallCheck
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub
        - "/${ResourceNamePrefix}/${SafeVersion}/events"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RetentionInDays: !If
        - ImportLogRetentionDays
        - !Ref LogRetentionDaysSsmValue
        - !Ref LogRetentionDays

  MaintenanceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub
        - "/${ResourceNamePrefix}/${SafeVersion}/maintenance"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RetentionInDays: !If
        - ImportLogRetentionDays
        - !Ref LogRetentionDaysSsmValue
        - !Ref LogRetentionDays

  WorkerLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PreinstallCheck
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub
        - "/aws/lambda/${ResourceNamePrefix}_${SafeVersion}_worker"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RetentionInDays: !If
        - ImportLogRetentionDays
        - !Ref LogRetentionDaysSsmValue
        - !Ref LogRetentionDays

  WorkerRetryLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PreinstallCheck
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub
        - "/aws/lambda/${ResourceNamePrefix}_${SafeVersion}_worker_retry"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RetentionInDays:   !If
        - ImportLogRetentionDays
        - !Ref LogRetentionDaysSsmValue
        - !Ref LogRetentionDays

  WorkspaceManagerLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PreinstallCheck
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub
        - "/aws/lambda/${ResourceNamePrefix}_${SafeVersion}_workspace_manager"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RetentionInDays:   !If
        - ImportLogRetentionDays
        - !Ref LogRetentionDaysSsmValue
        - !Ref LogRetentionDays

  EventsDlqLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PreinstallCheck
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub
        - "/aws/lambda/${ResourceNamePrefix}_${SafeVersion}_events_dlq"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RetentionInDays:   !If
        - ImportLogRetentionDays
        - !Ref LogRetentionDaysSsmValue
        - !Ref LogRetentionDays

  RunnableDlqLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PreinstallCheck
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub
        - "/aws/lambda/${ResourceNamePrefix}_${SafeVersion}_runnable_dlq"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RetentionInDays:   !If
        - ImportLogRetentionDays
        - !Ref LogRetentionDaysSsmValue
        - !Ref LogRetentionDays

  ControlLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: PreinstallCheck
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub
        - "/${ResourceNamePrefix}/${SafeVersion}/control"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RetentionInDays:  !If
        - ImportLogRetentionDays
        - !Ref LogRetentionDaysSsmValue
        - !Ref LogRetentionDays

  #
  # EVENTS
  #

  EventsTopic:
    Type: AWS::SNS::Topic
    DependsOn: PreinstallCheck
    Properties:
      TopicName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_events"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      KmsMasterKeyId: !If
        - ImportFoundationKeyAlias
        - !Ref KeyAliasSsmValue
        - !Ref FoundationKeyAlias
      Subscription:
        - Protocol: sqs
          Endpoint: !GetAtt EventsQueue.Arn

  EventsQueue:
    Type: AWS::SQS::Queue
    DependsOn: PreinstallCheck
    Properties:
      QueueName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_events"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      # Use max message size of 256kb
      MaximumMessageSize: 262144
      # Retain for 4 days by default - covering (long) weekends. Note that the DLQ has
      # a much longer handling period to allow investigation of failures.
      MessageRetentionPeriod: 345600
      # Handle messages immediately. Delays here would slow the handling of all events
      # flowing through the queue. Consider carefully if increasing.
      DelaySeconds: 0
      # CURRENT - Events Queue is used to process Commands as well...
      # Command handling can take a long time (e.g. container running, API
      # queries, mod install) so have a much longer visibility timeout than
      # event handling (which is more routing). If a command takes more than
      # the timeout the message will be re-processed and automaticaly ignored
      # if the process is running / locked.
      # FUTURE - Events are handled quickly, with a simple catch and route / dispatch model. They
      # do not require long processing time since they are not handling the actual function
      # or container run. Keep a short visibility timeout to catch problems more quickly.
      # VisibilityTimeout: 60
      VisibilityTimeout: 450
      # Our polling waits as long as possible for new messages to be added to the queue
      ReceiveMessageWaitTimeSeconds: 20
      # Messages are sent to the DLQ after 3 attempts. This is not the retry queue
      # in the retry queue we want the message to retry 10 times
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt EventsDeadLetterQueue.Arn
        maxReceiveCount: 3
      # Encrypt data in the queue. Reuse the same key for 24 hrs, reducing KMS costs.
      KmsMasterKeyId: !If
        - ImportFoundationKeyAlias
        - !Ref KeyAliasSsmValue
        - !Ref FoundationKeyAlias
      KmsDataKeyReusePeriodSeconds: 86400
      # GovCloud does not support SQS Tags. But only in Gov West, it worked in Gov East
      # https://github.com/aws/aws-sdk-go/issues/1898
      # issue persist as of 2019/10/18
      # Tags:
      #   - Key: Vendor
      #     Value: !FindInMap [Constants, Turbot, EntityName]
      #   - Key: Product
      #     Value: !FindInMap [Constants, Product, Name]
      #   - Key: Version
      #     Value: !FindInMap [Constants, Product, Version]

  EventsRetryQueue:
    Type: AWS::SQS::Queue
    DependsOn: PreinstallCheck
    Properties:
      QueueName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_events_retry"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      # Use max message size of 256kb
      MaximumMessageSize: 262144
      # Retain for 4 days by default - covering (long) weekends. Note that the DLQ has
      # a much longer handling period to allow investigation of failures.
      MessageRetentionPeriod: 345600
      # Handle messages immediately. Delays here would slow the handling of all events
      # flowing through the queue. Consider carefully if increasing.
      DelaySeconds: 0
      VisibilityTimeout: 450
      # Our polling waits as long as possible for new messages to be added to the queue
      ReceiveMessageWaitTimeSeconds: 20
      # Messages are sent to the DLQ after 10 attempts. This allows us time for message
      # retries should they be recevied out of order.
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt EventsDeadLetterQueue.Arn
        maxReceiveCount: !Ref EventsRetryCount
      # Encrypt data in the queue. Reuse the same key for 24 hrs, reducing KMS costs.
      KmsMasterKeyId: !If
        - ImportFoundationKeyAlias
        - !Ref KeyAliasSsmValue
        - !Ref FoundationKeyAlias
      KmsDataKeyReusePeriodSeconds: 86400
      # GovCloud does not support SQS Tags. But only in Gov West, it worked in Gov East
      # https://github.com/aws/aws-sdk-go/issues/1898
      # issue persist as of 2019/10/18
      # Tags:
      #   - Key: Vendor
      #     Value: !FindInMap [Constants, Turbot, EntityName]
      #   - Key: Product
      #     Value: !FindInMap [Constants, Product, Name]
      #   - Key: Version
      #     Value: !FindInMap [Constants, Product, Version]

  EventsDeadLetterQueue:
    Type: AWS::SQS::Queue
    DependsOn: PreinstallCheck
    Properties:
      QueueName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_events_dlq"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      # Use max message size of 256kb
      MaximumMessageSize: 262144
      # Use the maximum possible message retention for failed events, allowing time for investigation.
      MessageRetentionPeriod: 1209600
      # Handle messages immediately. Delays here would slow the handling of all events
      # flowing through the queue. Consider carefully if increasing.
      DelaySeconds: 0
      # Increase timeout to 900 minutes to spread out the processing in case we DB/load pressure
      VisibilityTimeout: 900
      # Our polling waits as long as possible for new messages to be added to the queue
      ReceiveMessageWaitTimeSeconds: 20
      # Encrypt data in the queue. Reuse the same key for 24 hrs, reducing KMS costs.
      KmsMasterKeyId: !If
        - ImportFoundationKeyAlias
        - !Ref KeyAliasSsmValue
        - !Ref FoundationKeyAlias
      KmsDataKeyReusePeriodSeconds: 86400
      # GovCloud does not support SQS Tags. But only in Gov West, it worked in Gov East
      # https://github.com/aws/aws-sdk-go/issues/1898
      # issue persist as of 2019/10/18
      # Tags:
      #   - Key: Vendor
      #     Value: !FindInMap [Constants, Turbot, EntityName]
      #   - Key: Product
      #     Value: !FindInMap [Constants, Product, Name]
      #   - Key: Version
      #     Value: !FindInMap [Constants, Product, Version]

  # SQS needs a special policy (including allow from any AWS account) to receive from SNS (even in the same account).
  # For details see https://docs.aws.amazon.com/sns/latest/dg/sns-sqs-as-subscriber.html
  EventsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    DependsOn: PreinstallCheck
    Properties:
      Queues:
        - !Ref EventsQueue
      PolicyDocument:
        Id: EventsQueuePolicy
        Version: "2012-10-17"
        Statement:
          - Sid: AllowFromEventsTopic
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sqs:SendMessage
            Resource: !GetAtt EventsQueue.Arn
            Condition:
              ArnEquals:
                "AWS:SourceArn": !Ref EventsTopic
          # TODO: when we optimise our minute tick, we shouldn't need this. This is currently needed for
          # CW Rule to send the minute tick per workspace
          - Sid: AllowFromCWRule
            Effect: Allow
            Principal:
              AWS: "*"
            Action: sqs:SendMessage
            Resource: !GetAtt EventsQueue.Arn
            Condition:
              ArnEquals:
                "AWS:SourceArn": !Sub "arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:rule*"

  EventsSubscription:
    Type: "AWS::SNS::Subscription"
    DependsOn: PreinstallCheck
    Properties:
      Endpoint: !GetAtt EventsQueue.Arn
      Protocol: "sqs"
      TopicArn: !Ref EventsTopic

  EventsQueueThresholdAlarm:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: EventsQueue
    Properties:
      AlarmName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_events_queue_messages_visible_alarm"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      AlarmDescription: "Events Queue Backlog number of messages visible alarm threshold"
      Namespace: "AWS/SQS"
      MetricName: ApproximateNumberOfMessagesVisible
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt EventsQueue.QueueName
      EvaluationPeriods: 3
      Period: 300
      Statistic: "Average"
      Threshold: 5000
      AlarmActions:
        - !Ref TurbotEnterpriseAlarmsTopic

  EventsDeadLetterQueueAgeOfOldestMessageAlarm:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: EventsDeadLetterQueue
    Properties:
      AlarmName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_events_dead_letter_queue_age_of_message_alarm"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      AlarmDescription: "Events Dead Letter Queue AgeOfOldestMessage alarm"
      Namespace: "AWS/SQS"
      MetricName: ApproximateAgeOfOldestMessage
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt EventsDeadLetterQueue.QueueName
      EvaluationPeriods: 1
      Period: 300
      Statistic: "Average"
      Threshold: 5000
      AlarmActions:
        - !Ref TurbotEnterpriseAlarmsTopic

  EventsRetryQueueAgeOfOldestMessageAlarm:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: EventsRetryQueue
    Properties:
      AlarmName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_events_retry_queue_age_of_message_alarm"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      AlarmDescription: "Events Retry Queue AgeOfOldestMessage alarm"
      Namespace: "AWS/SQS"
      MetricName: ApproximateAgeOfOldestMessage
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt EventsRetryQueue.QueueName
      EvaluationPeriods: 1
      Period: 300
      Statistic: "Average"
      Threshold: 5000
      AlarmActions:
        - !Ref TurbotEnterpriseAlarmsTopic

  EventsQueueAgeOfOldestMessageAlarm:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: EventsQueue
    Properties:
      AlarmName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_events_queue_age_of_message_alarm"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      AlarmDescription: "Events Queue AgeOfOldestMessage alarm"
      Namespace: "AWS/SQS"
      MetricName: ApproximateAgeOfOldestMessage
      ComparisonOperator: "GreaterThanThreshold"
      Dimensions:
        - Name: QueueName
          Value: !GetAtt EventsQueue.QueueName
      EvaluationPeriods: 1
      Period: 300
      Statistic: "Average"
      Threshold: 5000
      AlarmActions:
        - !Ref TurbotEnterpriseAlarmsTopic

  # To use a single SNS topic for all notifications related to the CloudWatch alarms.
  TurbotEnterpriseAlarmsTopic:
    Type: "AWS::SNS::Topic"
    DependsOn: PreinstallCheck
    Properties:
      TopicName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_alarms"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      KmsMasterKeyId: !If
        - ImportFoundationKeyAlias
        - !Ref KeyAliasSsmValue
        - !Ref FoundationKeyAlias

  #
  # LOAD BALANCER
  #

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - PreinstallCheck
      - TefNetworkParameters
    Properties:
      Name: !Sub
        - "${ResourceNamePrefix}-${SafeVersion}-lb"
        - SafeVersion: !Join [ "-", !Split [ ".", !Join [ "-", !Split [ "_", !FindInMap [Constants, Product, Version] ] ] ] ]
      Type: application
      # We could probably support dualstack here (IPv6 and IPv4) since the ALB will
      # only talk back to our application in IPv4 anyway. But, if dualstack is used
      # then the VPC must have an IPv6 CIDR range attached too - which seems too
      # difficult for our deployment scenarios at this stage.
      IpAddressType: ipv4
      Scheme: !If
        - ImportLoadBalancerScheme
        - !Ref LoadBalancerSchemeSsmValue
        - !Ref LoadBalancerScheme
      Subnets: !If
        - ImportLoadbalancerSubnetIdsSsmValue
        - !Ref LoadbalancerSubnetIdsSsmValue
        - !Ref TurbotLoadBalancerSubnetIds
      SecurityGroups:
        - !If
          - UseFoundationLoadBalancerSecurityGroup
          - !Ref LoadBalancerSecurityGroupSsmValue
          - !Ref FoundationLoadBalancerSecurityGroup
      LoadBalancerAttributes:
        # Good to support HTTP/2 for end users. I don't believe this impacts
        # the connection from the load balancer back to our application.
        - Key: routing.http2.enabled
          Value: true
        - Key: idle_timeout.timeout_seconds
          Value: !GetAtt [ TefNetworkParameters, alb_idle_timeout]
        - Key: access_logs.s3.enabled
          Value: true
        - Key: access_logs.s3.bucket
          Value: !If
            - ImportFoundationLogBucket
            - !Ref LogBucketSsmValue
            - !Ref FoundationLogBucket
        - Key: access_logs.s3.prefix
          Value: !GetAtt [ TefNetworkParameters, alb_log_prefix]

      Tags:
        - Key: Vendor
          Value: !FindInMap [Constants, Turbot, EntityName]
        - Key: Product
          Value: !FindInMap [Constants, Product, Name]
        - Key: Version
          Value: !FindInMap [Constants, Product, Version]

  LoadBalancerHttpsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      Name: !Join ["-", [!GetAtt LoadBalancer.LoadBalancerName, "https"]]
      VpcId: !If
        - ImportTurbotVpcId
        - !Ref TurbotVpcSsmValue
        - !Ref TurbotVpcId

      TargetType: instance
      Port: 8443
      Protocol: HTTPS
      HealthCheckIntervalSeconds: 35
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 4
      HealthCheckTimeoutSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthCheckPath: "/api/latest/turbot/health"
      # Health responses have status code 200
      Matcher:
        HttpCode: "200,302"
      Tags:
        - Key: Vendor
          Value: !FindInMap [Constants, Turbot, EntityName]
        - Key: Product
          Value: !FindInMap [Constants, Product, Name]
        - Key: Version
          Value: !FindInMap [Constants, Product, Version]

  LoadBalancerEventsTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      Name: !Join ["-", [!GetAtt LoadBalancer.LoadBalancerName, "events"]]
      VpcId: !If
        - ImportTurbotVpcId
        - !Ref TurbotVpcSsmValue
        - !Ref TurbotVpcId

      TargetType: instance
      Port: 8443
      Protocol: HTTPS
      HealthCheckIntervalSeconds: 35
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 4
      HealthCheckTimeoutSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthCheckPath: "/api/latest/turbot/health"
      # Health responses have status code 200
      Matcher:
        HttpCode: "200,302"
      Tags:
        - Key: Vendor
          Value: !FindInMap [Constants, Turbot, EntityName]
        - Key: Product
          Value: !FindInMap [Constants, Product, Name]
        - Key: Version
          Value: !FindInMap [Constants, Product, Version]

  TargetGroupUnhealthyHostCountThresholdAlarm:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: LoadBalancerHttpsTargetGroup
    Properties:
      AlarmName: !Sub
        - "${TargetGroupName}_unhealthyhostcount_alarm"
        - TargetGroupName: !Join [ "_", !Split [ "-", !GetAtt "LoadBalancerHttpsTargetGroup.TargetGroupName" ] ]
      AlarmDescription: "Target Group Unhealthy host count alarm threshold"
      Namespace: "AWS/ApplicationELB"
      MetricName: UnHealthyHostCount
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt LoadBalancerHttpsTargetGroup.TargetGroupFullName
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
      EvaluationPeriods: 1
      Period: 60
      Statistic: "Average"
      Threshold: 1
      AlarmActions:
        - !Ref TurbotEnterpriseAlarmsTopic

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: PreinstallCheck
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTPS
      Port: 443
      # Enforce the use of a strict TLS 1.2 based security policy for
      # all connections. This is an aggressive / secure choice, but should
      # work well for our customers.
      # See https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      # Send traffic to the API container
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerHttpsTargetGroup
      Certificates:
        - CertificateArn: !If
          - ImportCertificateArn
          - !Ref CertificateArnSsmValue
          - !Ref TurbotCertificateArn

  LoadBalancerHTTPlistener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"

  LoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerEventsTargetGroup
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /api/v5/events/*
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  #
  # DNS MANAGEMENT
  #

  LoadBalancerDnsAlias:
    Type: AWS::Route53::RecordSet
    DependsOn: LoadBalancer
    Condition: ManageVersionDomainInRoute53
    Properties:
      HostedZoneName:
        Fn::Sub:
          - "${hostedZone}."
          - hostedZone: !If
            - ImportFoundationInstallationDomain
            - !Ref InstallationDomainSsmValue
            - !Ref FoundationInstallationDomain
      Name:
        Fn::Sub:
          - "${ResourceNamePrefix}-${Version}.${hostedZone}."
          - Version: !Join [ "-", !Split [ "_", !Join [ "-", !Split [ ".", !FindInMap [Constants, Product, Version] ] ] ] ]
            hostedZone: !If
            - ImportFoundationInstallationDomain
            - !Ref InstallationDomainSsmValue
            - !Ref FoundationInstallationDomain
      Type: CNAME
      TTL: 30
      Weight: 10
      SetIdentifier: !Sub ${AWS::Region}
      ResourceRecords:
        - !GetAtt LoadBalancer.DNSName

  #
  # SECURITY GROUPS
  #
  OutboundInternetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: PreinstallCheck
    Condition: CreateOutboundInternetSecurityGroup
    Properties:
      GroupName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_outbound_internet_security_group"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      GroupDescription: Allow outbound HTTPS to the Internet.
      VpcId: !If
        - ImportTurbotVpcId
        - !Ref TurbotVpcSsmValue
        - !Ref TurbotVpcId
      SecurityGroupIngress: []
      SecurityGroupEgress:
        - Description: >-
            Outbound Internet security group.
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      Tags:
        - Key: Vendor
          Value: !FindInMap [Constants, Turbot, EntityName]
        - Key: Product
          Value: !FindInMap [Constants, Product, Name]
        - Key: Name
          Value: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_outbound_internet_security_group"
            - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]

  #
  # API CONTAINERS
  #

  ApiTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - PreinstallCheck
      - TeIamParameters
      - TefIamParameters
    Properties:
      Family: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_api"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RequiresCompatibilities:
        - EC2
      NetworkMode: bridge
      ExecutionRoleArn: !GetAtt [TeIamParameters, task_exec_role]
      TaskRoleArn: !GetAtt [TeIamParameters, task_role]
      ContainerDefinitions:
        - Name: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_api"
            - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
          # Use the image from our portfolio store for this release phase and region.
          Image: !Sub
            - "${PortfolioAccount}.dkr.ecr.${AWS::Region}.amazonaws.com/${ReleasePhase}/turbot:${Version}"
            - PortfolioAccount: !If
                - IsGovCloud
                - !FindInMap [Constants, Portfolio, GovCloudAccountId]
                - !FindInMap [Constants, Portfolio, AccountId]
              Version: !FindInMap [Constants, Product, Version]

          DockerLabels:
            Vendor: !FindInMap [Constants, Turbot, EntityName]
            Product: !FindInMap [Constants, Product, Name]
            Version: !FindInMap [Constants, Product, Version]

          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinitions.html#cfn-ecs-taskdefinition-containerdefinition-memoryreservation
          MemoryReservation: 256
          # At least one of the containers for a task must be essential, which basically means the
          # other containers in the task depend on it. We have a single container, so it's the essential
          # one.
          Essential: true
          # Our container does not require root / priveleged status.
          Privileged: false
          ReadonlyRootFilesystem: true
          PortMappings:
            - Protocol: tcp
              HostPort: 0
              ContainerPort: 8443
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ApiLogGroup
              # Logging to a central region is tempting, but would affect our regional redundancy pattern
              # so on balance we keep the logs in multiple regions.
              awslogs-region: !Ref "AWS::Region"

          Environment:
            - Name: TURBOT_VERSION
              Value: !FindInMap [Constants, Product, Version]
            - Name: TURBOT_FLAGS
              Value: !Ref FlagsSsmValue
            - Name: TURBOT_SERVER_TYPE
              Value: api
            - Name: TURBOT_LOG_LEVEL
              Value: info

            - Name: TURBOT_MAX_CONNECTIONS
              Value: !If
                - UseWorkerLambdaMaxDBConnectionsSsmValue
                - !Ref WorkerLambdaMaxDBConnectionsSsmValue
                - !Ref WorkerLambdaMaxDBConnections

            - Name: TURBOT_MAX_REPLICA_CONNECTIONS
              Value: !Ref APIContainerReplicaMaxDBConnections

            - Name: TURBOT_PREFIX
              Value: !Ref ResourceNamePrefix

            - Name: TURBOT_RELEASE_PHASE
              Value: !Ref ReleasePhase

            - Name: TURBOT_RUNNABLE_ROLE
              Value: !GetAtt [TefIamParameters, runnable_role_in_region]

            - Name: TURBOT_RUNNABLE_IN_VPC_ROLE
              Value: !GetAtt [TefIamParameters, runnable_in_vpc_role_in_region]

            - Name: KEEP_ALIVE_TIMEOUT
              Value: !GetAtt [TefNetworkParameters, alb_idle_timeout]

            - Name: TURBOT_COLLECTIVE_DOMAIN
              Value: !If
                - ImportFoundationInstallationDomain
                - !Ref InstallationDomainSsmValue
                - !Ref FoundationInstallationDomain

            - Name: TURBOT_REGIONS
              Value: !If
                - ImportFoundationRegions
                - !Join [",", !Ref RegionsSsmValue ]
                - !Join [",", !Ref FoundationRegions ]

            - Name: TURBOT_REGION
              Value: !Ref "AWS::Region"

            - Name: NODE_TLS_REJECT_UNAUTHORIZED
              Value: !If [ AllowUseOfSelfSignedCertificate, "0", "" ]

            # We believe Amazon Linux 2 ECS Host no longer have this environment variable set by default
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"

            - Name: AWS_ACCOUNT_ID
              Value: !Ref "AWS::AccountId"

            # Proxy settings
            - Name: HTTP_PROXY
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: http_proxy
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: HTTPS_PROXY
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: https_proxy
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: NO_PROXY
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy
            - Name: no_proxy
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy

            - Name: OS_GUARDRAILS
              Value: !If
                - UseOSGuardrailsSsmValue
                - !Ref OSGuardrailsSsmValue
                - !Ref OSGuardrails

  # Notes on other fields not defined above:
  #   DnsServers - Not required until we have local access to AD or similar.
  #   DnsSearchDomains - Not required until we have local access to AD or similar.
  #   DockerSecurityOptions - Not valid for fargate.
  #   HealthCheck - TODO per #21

  ApiService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_api"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      Cluster: !Sub "${ResourceNamePrefix}"
      TaskDefinition: !Ref ApiTask
      DesiredCount: !If
        - ImportApiDesiredScale
        - !Ref ApiDesiredScaleSsmValue
        - !Ref ApiDesiredScale
      LaunchType: EC2
      LoadBalancers:
        - TargetGroupArn: !Ref LoadBalancerHttpsTargetGroup
          ContainerName: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_api"
            - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
          ContainerPort: 8443

  #
  # Event Handler Container
  #

  EventTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - PreinstallCheck
      - TeIamParameters
      - TefIamParameters
    Properties:
      Family: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_events"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RequiresCompatibilities:
        - EC2
      NetworkMode: bridge
      ExecutionRoleArn: !GetAtt [TeIamParameters, task_exec_role]
      TaskRoleArn: !GetAtt [TeIamParameters, task_role]
      ContainerDefinitions:
        - Name: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_events"
            - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
          # Use the image from our portfolio store for this release phase and region.
          Image: !Sub
            - "${PortfolioAccount}.dkr.ecr.${AWS::Region}.amazonaws.com/${ReleasePhase}/turbot:${Version}"
            - PortfolioAccount: !If
                - IsGovCloud
                - !FindInMap [Constants, Portfolio, GovCloudAccountId]
                - !FindInMap [Constants, Portfolio, AccountId]
              Version: !FindInMap [Constants, Product, Version]

          DockerLabels:
            Vendor: !FindInMap [Constants, Turbot, EntityName]
            Product: !FindInMap [Constants, Product, Name]
            Version: !FindInMap [Constants, Product, Version]

          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinitions.html#cfn-ecs-taskdefinition-containerdefinition-memoryreservation
          MemoryReservation: 256
          # At least one of the containers for a task must be essential, which basically means the
          # other containers in the task depend on it. We have a single container, so it's the essential
          # one.
          Essential: true
          # Our container does not require root / priveleged status.
          Privileged: false
          ReadonlyRootFilesystem: true
          PortMappings:
            - Protocol: tcp
              HostPort: 0
              ContainerPort: 8443
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EventLogGroup
              # Logging to a central region is tempting, but would affect our regional redundancy pattern
              # so on balance we keep the logs in multiple regions.
              awslogs-region: !Ref "AWS::Region"

          Environment:
            - Name: TURBOT_VERSION
              Value: !FindInMap [Constants, Product, Version]
            - Name: TURBOT_FLAGS
              Value: !Ref FlagsSsmValue
            - Name: TURBOT_SERVER_TYPE
              Value: api
            - Name: TURBOT_LOG_LEVEL
              Value: info

            - Name: TURBOT_MAX_CONNECTIONS
              Value: !If
                - UseWorkerLambdaMaxDBConnectionsSsmValue
                - !Ref WorkerLambdaMaxDBConnectionsSsmValue
                - !Ref WorkerLambdaMaxDBConnections

            - Name: TURBOT_MAX_REPLICA_CONNECTIONS
              Value: !Ref APIContainerReplicaMaxDBConnections

            - Name: TURBOT_PREFIX
              Value: !Ref ResourceNamePrefix

            - Name: TURBOT_RELEASE_PHASE
              Value: !Ref ReleasePhase

            - Name: TURBOT_RUNNABLE_ROLE
              Value: !GetAtt [TefIamParameters, runnable_role_in_region]

            - Name: TURBOT_RUNNABLE_IN_VPC_ROLE
              Value: !GetAtt [TefIamParameters, runnable_in_vpc_role_in_region]

            - Name: TURBOT_COLLECTIVE_DOMAIN
              Value: !If
                - ImportFoundationInstallationDomain
                - !Ref InstallationDomainSsmValue
                - !Ref FoundationInstallationDomain

            - Name: TURBOT_REGIONS
              Value: !If
                - ImportFoundationRegions
                - !Join [",", !Ref RegionsSsmValue ]
                - !Join [",", !Ref FoundationRegions ]

            - Name: TURBOT_REGION
              Value: !Ref "AWS::Region"

            - Name: NODE_TLS_REJECT_UNAUTHORIZED
              Value: !If [ AllowUseOfSelfSignedCertificate, "0", "" ]

            # We believe Amazon Linux 2 ECS Host no longer have this environment variable set by default
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"

            - Name: AWS_ACCOUNT_ID
              Value: !Ref "AWS::AccountId"

            # Proxy settings
            - Name: HTTP_PROXY
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: http_proxy
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: HTTPS_PROXY
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: https_proxy
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: NO_PROXY
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy
            - Name: no_proxy
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy

  # Notes on other fields not defined above:
  #   DnsServers - Not required until we have local access to AD or similar.
  #   DnsSearchDomains - Not required until we have local access to AD or similar.
  #   DockerSecurityOptions - Not valid for fargate.
  #   HealthCheck - TODO per #21

  EventService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerListenerRule
      - LoadBalancerListener
    Properties:
      ServiceName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_events"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      Cluster: !Sub "${ResourceNamePrefix}"
      TaskDefinition: !Ref EventTask
      DesiredCount: !If
        - ImportApiDesiredScale
        - !Ref ApiDesiredScaleSsmValue
        - !Ref ApiDesiredScale
      LaunchType: EC2
      LoadBalancers:
        - TargetGroupArn: !Ref LoadBalancerEventsTargetGroup
          ContainerName: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_events"
            - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
          ContainerPort: 8443

  # #
  # Maintenance Container
  #

  MaintenanceTask:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - MaintenanceLogGroup
      - TeIamParameters
    Properties:
      Family: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_maintenance"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RequiresCompatibilities:
        - EC2
      NetworkMode: bridge
      ExecutionRoleArn: !GetAtt [TeIamParameters, task_exec_role]
      TaskRoleArn: !GetAtt [TeIamParameters, maintenance_container_role]
      ContainerDefinitions:
        - Name: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_maintenance"
            - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
          # Use the image from our portfolio store for this release phase and region.
          Image: !Sub
            - "${PortfolioAccount}.dkr.ecr.${AWS::Region}.amazonaws.com/${ReleasePhase}/turbot:maintenance-${Version}"
            - PortfolioAccount: !If
                - IsGovCloud
                - !FindInMap [Constants, Portfolio, GovCloudAccountId]
                - !FindInMap [Constants, Portfolio, AccountId]
              Version: !FindInMap [Constants, Product, Version]

          DockerLabels:
            Vendor: !FindInMap [Constants, Turbot, EntityName]
            Product: !FindInMap [Constants, Product, Name]
            Version: !FindInMap [Constants, Product, Version]

          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinitions.html#cfn-ecs-taskdefinition-containerdefinition-memoryreservation
          MemoryReservation: 256
          # At least one of the containers for a task must be essential, which basically means the
          # other containers in the task depend on it. We have a single container, so it's the essential
          # one.
          Essential: true
          # Our container does not require root / priveleged status.
          Privileged: false
          ReadonlyRootFilesystem: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MaintenanceLogGroup
              # Logging to a central region is tempting, but would affect our regional redundancy pattern
              # so on balance we keep the logs in multiple regions.
              awslogs-region: !Ref "AWS::Region"

          Environment:
            # Turbot Configuration
            - Name: TURBOT_VERSION
              Value: !FindInMap [Constants, Product, Version]
            - Name: TURBOT_FLAGS
              Value: !Ref FlagsSsmValue
            - Name: TURBOT_SERVER_TYPE
              Value: maintenance
            - Name: TURBOT_LOG_LEVEL
              Value: debug
            - Name: TURBOT_PREFIX
              Value: !Ref ResourceNamePrefix
            - Name: TURBOT_COLLECTIVE_DOMAIN
              Value: !If
                - ImportFoundationInstallationDomain
                - !Ref InstallationDomainSsmValue
                - !Ref FoundationInstallationDomain

            - Name: TURBOT_REGIONS
              Value: !If
                - ImportFoundationRegions
                - !Join [",", !Ref RegionsSsmValue ]
                - !Join [",", !Ref FoundationRegions ]

            - Name: TURBOT_REGION
              Value: !Ref "AWS::Region"

            # We believe Amazon Linux 2 ECS Host no longer have this environment variable set by default
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"
            # AWS Environment
            - Name: AWS_ACCOUNT_ID
              Value: !Ref "AWS::AccountId"
            # Proxy settings
            - Name: HTTP_PROXY
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: http_proxy
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: HTTPS_PROXY
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: https_proxy
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: NO_PROXY
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy
            - Name: no_proxy
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy

  MaintenanceService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_maintenance"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      Cluster: !Sub "${ResourceNamePrefix}"
      TaskDefinition: !Ref MaintenanceTask
      DesiredCount: 1
      LaunchType: EC2


  #
  # FACTORY CONTAINERS
  #

  FactoryTaskV01114:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - PreinstallCheck
      - TeIamParameters
      - TefIamParameters
    Properties:
      Family: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_11_14"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !GetAtt [TeIamParameters, factory_task_exec_role]
      TaskRoleArn: !GetAtt [TefIamParameters, runnable_role_in_region]
      ContainerDefinitions:
        - Name: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_11_14"
            -  SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
          # Use the image from our portfolio store for this release phase and region.
          Image: !Sub
            - "${PortfolioAccount}.dkr.ecr.${AWS::Region}.amazonaws.com/${ReleasePhase}/turbot:turbotturbotfactory-${Version}-0.11.14"
            - PortfolioAccount: !If
                - IsGovCloud
                - !FindInMap [Constants, Portfolio, GovCloudAccountId]
                - !FindInMap [Constants, Portfolio, AccountId]
              Version: !FindInMap [Constants, Product, Version]

          DockerLabels:
            Vendor: !FindInMap [Constants, Turbot, EntityName]
            Product: !FindInMap [Constants, Product, Name]
            Version: !FindInMap [Constants, Product, Version]

          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinitions.html#cfn-ecs-taskdefinition-containerdefinition-memoryreservation
          MemoryReservation: 128

          # Our container does not require root / priveleged status.
          Privileged: false
          # Temporary files are used during mod installation. Fargate does not support tmpfs or data volumes,
          # so we cannot do read only until we move to EC2 based or eliminate the need for the temp files.
          # TODO - Enable this per #20
          # Factory needs temporary file system for its Terraform operation.
          # we can now switch this on when we move to ECS EC2
          ReadonlyRootFilesystem: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ControlLogGroup
              # Logging to a central region is tempting, but would affect our regional redundancy pattern
              # so on balance we keep the logs in multiple regions.
              awslogs-region: !Ref "AWS::Region"

          Environment:
            - Name: TURBOT_VERSION
              Value: !FindInMap [Constants, Product, Version]
            - Name: TURBOT_FLAGS
              Value: !Ref FlagsSsmValue
            - Name: TURBOT_LOG_LEVEL
              Value: info

            - Name: TURBOT_PREFIX
              Value: !Ref ResourceNamePrefix

            - Name: TURBOT_RELEASE_PHASE
              Value: !Ref ReleasePhase

            # All of the regions where this Turbot installation is running
            - Name: TURBOT_REGIONS
              Value: !If
                - ImportFoundationRegions
                - !Join [",", !Ref RegionsSsmValue ]
                - !Join [",", !Ref FoundationRegions ]

            - Name: TURBOT_REGION
              Value: !Ref "AWS::Region"

            # We believe Amazon Linux 2 ECS Host no longer have this environment variable set by default
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"

            - Name: AWS_ACCOUNT_ID
              Value: !Ref "AWS::AccountId"

            # Proxy settings
            - Name: HTTP_PROXY
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: http_proxy
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: HTTPS_PROXY
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: https_proxy
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: NO_PROXY
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy
            - Name: no_proxy
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy

  FactoryTaskV01228:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - PreinstallCheck
      - TeIamParameters
      - TefIamParameters
    Properties:
      Family: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_12_28"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !GetAtt [TeIamParameters, factory_task_exec_role]
      TaskRoleArn: !GetAtt [TefIamParameters, runnable_role_in_region]
      ContainerDefinitions:
        - Name: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_12_28"
            -  SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
          # Use the image from our portfolio store for this release phase and region.
          Image: !Sub
            - "${PortfolioAccount}.dkr.ecr.${AWS::Region}.amazonaws.com/${ReleasePhase}/turbot:turbotturbotfactory-${Version}-0.12.28"
            - PortfolioAccount: !If
                - IsGovCloud
                - !FindInMap [Constants, Portfolio, GovCloudAccountId]
                - !FindInMap [Constants, Portfolio, AccountId]
              Version: !FindInMap [Constants, Product, Version]

          DockerLabels:
            Vendor: !FindInMap [Constants, Turbot, EntityName]
            Product: !FindInMap [Constants, Product, Name]
            Version: !FindInMap [Constants, Product, Version]

          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinitions.html#cfn-ecs-taskdefinition-containerdefinition-memoryreservation
          MemoryReservation: 128

          # Our container does not require root / priveleged status.
          Privileged: false
          # Temporary files are used during mod installation. Fargate does not support tmpfs or data volumes,
          # so we cannot do read only until we move to EC2 based or eliminate the need for the temp files.
          # TODO - Enable this per #20
          # Factory needs temporary file system for its Terraform operation.
          # we can now switch this on when we move to ECS EC2
          ReadonlyRootFilesystem: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ControlLogGroup
              # Logging to a central region is tempting, but would affect our regional redundancy pattern
              # so on balance we keep the logs in multiple regions.
              awslogs-region: !Ref "AWS::Region"

          Environment:
            - Name: TURBOT_VERSION
              Value: !FindInMap [Constants, Product, Version]
            - Name: TURBOT_FLAGS
              Value: !Ref FlagsSsmValue
            - Name: TURBOT_LOG_LEVEL
              Value: info

            - Name: TURBOT_PREFIX
              Value: !Ref ResourceNamePrefix

            - Name: TURBOT_RELEASE_PHASE
              Value: !Ref ReleasePhase

            # All of the regions where this Turbot installation is running
            - Name: TURBOT_REGIONS
              Value: !If
                - ImportFoundationRegions
                - !Join [",", !Ref RegionsSsmValue ]
                - !Join [",", !Ref FoundationRegions ]

            - Name: TURBOT_REGION
              Value: !Ref "AWS::Region"

            # We believe Amazon Linux 2 ECS Host no longer have this environment variable set by default
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"

            - Name: AWS_ACCOUNT_ID
              Value: !Ref "AWS::AccountId"

            # Proxy settings
            - Name: HTTP_PROXY
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: http_proxy
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: HTTPS_PROXY
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: https_proxy
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: NO_PROXY
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy
            - Name: no_proxy
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy

  FactoryTaskV0130beta3:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - PreinstallCheck
      - TeIamParameters
      - TefIamParameters
    Properties:
      Family: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_13_0-beta3"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !GetAtt [TeIamParameters, factory_task_exec_role]
      TaskRoleArn: !GetAtt [TefIamParameters, runnable_role_in_region]
      ContainerDefinitions:
        - Name: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_13_0-beta3"
            -  SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
          # Use the image from our portfolio store for this release phase and region.
          Image: !Sub
            - "${PortfolioAccount}.dkr.ecr.${AWS::Region}.amazonaws.com/${ReleasePhase}/turbot:turbotturbotfactory-${Version}-0.13.0-beta3"
            - PortfolioAccount: !If
                - IsGovCloud
                - !FindInMap [Constants, Portfolio, GovCloudAccountId]
                - !FindInMap [Constants, Portfolio, AccountId]
              Version: !FindInMap [Constants, Product, Version]

          DockerLabels:
            Vendor: !FindInMap [Constants, Turbot, EntityName]
            Product: !FindInMap [Constants, Product, Name]
            Version: !FindInMap [Constants, Product, Version]

          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinitions.html#cfn-ecs-taskdefinition-containerdefinition-memoryreservation
          MemoryReservation: 128

          # Our container does not require root / priveleged status.
          Privileged: false
          # Temporary files are used during mod installation. Fargate does not support tmpfs or data volumes,
          # so we cannot do read only until we move to EC2 based or eliminate the need for the temp files.
          # TODO - Enable this per #20
          # Factory needs temporary file system for its Terraform operation.
          # we can now switch this on when we move to ECS EC2
          ReadonlyRootFilesystem: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ControlLogGroup
              # Logging to a central region is tempting, but would affect our regional redundancy pattern
              # so on balance we keep the logs in multiple regions.
              awslogs-region: !Ref "AWS::Region"

          Environment:
            - Name: TURBOT_VERSION
              Value: !FindInMap [Constants, Product, Version]
            - Name: TURBOT_FLAGS
              Value: !Ref FlagsSsmValue
            - Name: TURBOT_LOG_LEVEL
              Value: info

            - Name: TURBOT_PREFIX
              Value: !Ref ResourceNamePrefix

            - Name: TURBOT_RELEASE_PHASE
              Value: !Ref ReleasePhase

            # All of the regions where this Turbot installation is running
            - Name: TURBOT_REGIONS
              Value: !If
                - ImportFoundationRegions
                - !Join [",", !Ref RegionsSsmValue ]
                - !Join [",", !Ref FoundationRegions ]

            - Name: TURBOT_REGION
              Value: !Ref "AWS::Region"

            # We believe Amazon Linux 2 ECS Host no longer have this environment variable set by default
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"

            - Name: AWS_ACCOUNT_ID
              Value: !Ref "AWS::AccountId"

            # Proxy settings
            - Name: HTTP_PROXY
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: http_proxy
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: HTTPS_PROXY
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: https_proxy
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: NO_PROXY
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy
            - Name: no_proxy
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy

  FactoryTaskV01411:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - PreinstallCheck
      - TeIamParameters
      - TefIamParameters
    Properties:
      Family: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_14_11"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !GetAtt [TeIamParameters, factory_task_exec_role]
      TaskRoleArn: !GetAtt [TefIamParameters, runnable_role_in_region]
      ContainerDefinitions:
        - Name: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_14_11"
            -  SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
          # Use the image from our portfolio store for this release phase and region.
          Image: !Sub
            - "${PortfolioAccount}.dkr.ecr.${AWS::Region}.amazonaws.com/${ReleasePhase}/turbot:turbotturbotfactory-${Version}-0.14.11"
            - PortfolioAccount: !If
                - IsGovCloud
                - !FindInMap [Constants, Portfolio, GovCloudAccountId]
                - !FindInMap [Constants, Portfolio, AccountId]
              Version: !FindInMap [Constants, Product, Version]

          DockerLabels:
            Vendor: !FindInMap [Constants, Turbot, EntityName]
            Product: !FindInMap [Constants, Product, Name]
            Version: !FindInMap [Constants, Product, Version]

          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinitions.html#cfn-ecs-taskdefinition-containerdefinition-memoryreservation
          MemoryReservation: 128

          # Our container does not require root / priveleged status.
          Privileged: false
          # Temporary files are used during mod installation. Fargate does not support tmpfs or data volumes,
          # so we cannot do read only until we move to EC2 based or eliminate the need for the temp files.
          # TODO - Enable this per #20
          # Factory needs temporary file system for its Terraform operation.
          # we can now switch this on when we move to ECS EC2
          ReadonlyRootFilesystem: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ControlLogGroup
              # Logging to a central region is tempting, but would affect our regional redundancy pattern
              # so on balance we keep the logs in multiple regions.
              awslogs-region: !Ref "AWS::Region"

          Environment:
            - Name: TURBOT_VERSION
              Value: !FindInMap [Constants, Product, Version]
            - Name: TURBOT_FLAGS
              Value: !Ref FlagsSsmValue
            - Name: TURBOT_LOG_LEVEL
              Value: info

            - Name: TURBOT_PREFIX
              Value: !Ref ResourceNamePrefix

            - Name: TURBOT_RELEASE_PHASE
              Value: !Ref ReleasePhase

            # All of the regions where this Turbot installation is running
            - Name: TURBOT_REGIONS
              Value: !If
                - ImportFoundationRegions
                - !Join [",", !Ref RegionsSsmValue ]
                - !Join [",", !Ref FoundationRegions ]

            - Name: TURBOT_REGION
              Value: !Ref "AWS::Region"

            # We believe Amazon Linux 2 ECS Host no longer have this environment variable set by default
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"

            - Name: AWS_ACCOUNT_ID
              Value: !Ref "AWS::AccountId"

            # Proxy settings
            - Name: HTTP_PROXY
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: http_proxy
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: HTTPS_PROXY
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: https_proxy
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: NO_PROXY
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy
            - Name: no_proxy
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy

  FactoryTaskV0155:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - PreinstallCheck
      - TeIamParameters
      - TefIamParameters
    Properties:
      Family: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_15_5"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !GetAtt [TeIamParameters, factory_task_exec_role]
      TaskRoleArn: !GetAtt [TefIamParameters, runnable_role_in_region]
      ContainerDefinitions:
        - Name: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_15_5"
            -  SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
          # Use the image from our portfolio store for this release phase and region.
          Image: !Sub
            - "${PortfolioAccount}.dkr.ecr.${AWS::Region}.amazonaws.com/${ReleasePhase}/turbot:turbotturbotfactory-${Version}-0.15.5"
            - PortfolioAccount: !If
                - IsGovCloud
                - !FindInMap [Constants, Portfolio, GovCloudAccountId]
                - !FindInMap [Constants, Portfolio, AccountId]
              Version: !FindInMap [Constants, Product, Version]

          DockerLabels:
            Vendor: !FindInMap [Constants, Turbot, EntityName]
            Product: !FindInMap [Constants, Product, Name]
            Version: !FindInMap [Constants, Product, Version]

          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinitions.html#cfn-ecs-taskdefinition-containerdefinition-memoryreservation
          MemoryReservation: 128

          # Our container does not require root / priveleged status.
          Privileged: false
          # Temporary files are used during mod installation. Fargate does not support tmpfs or data volumes,
          # so we cannot do read only until we move to EC2 based or eliminate the need for the temp files.
          # TODO - Enable this per #20
          # Factory needs temporary file system for its Terraform operation.
          # we can now switch this on when we move to ECS EC2
          ReadonlyRootFilesystem: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ControlLogGroup
              # Logging to a central region is tempting, but would affect our regional redundancy pattern
              # so on balance we keep the logs in multiple regions.
              awslogs-region: !Ref "AWS::Region"

          Environment:
            - Name: TURBOT_VERSION
              Value: !FindInMap [Constants, Product, Version]
            - Name: TURBOT_FLAGS
              Value: !Ref FlagsSsmValue
            - Name: TURBOT_LOG_LEVEL
              Value: info

            - Name: TURBOT_PREFIX
              Value: !Ref ResourceNamePrefix

            - Name: TURBOT_RELEASE_PHASE
              Value: !Ref ReleasePhase

            # All of the regions where this Turbot installation is running
            - Name: TURBOT_REGIONS
              Value: !If
                - ImportFoundationRegions
                - !Join [",", !Ref RegionsSsmValue ]
                - !Join [",", !Ref FoundationRegions ]

            - Name: TURBOT_REGION
              Value: !Ref "AWS::Region"

            # We believe Amazon Linux 2 ECS Host no longer have this environment variable set by default
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"

            - Name: AWS_ACCOUNT_ID
              Value: !Ref "AWS::AccountId"

            # Proxy settings
            - Name: HTTP_PROXY
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: http_proxy
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: HTTPS_PROXY
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: https_proxy
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: NO_PROXY
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy
            - Name: no_proxy
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy

  FactoryServiceV01114:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_11_14"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      Cluster: !Sub "${ResourceNamePrefix}"
      TaskDefinition: !Ref FactoryTaskV01114
      DesiredCount: 0
      LaunchType: EC2

  FactoryServiceV01228:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_12_28"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      Cluster: !Sub "${ResourceNamePrefix}"
      TaskDefinition: !Ref FactoryTaskV01228
      DesiredCount: 0
      LaunchType: EC2

  FactoryServiceV0130beta3:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_13_0-beta3"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      Cluster: !Sub "${ResourceNamePrefix}"
      TaskDefinition: !Ref FactoryTaskV0130beta3
      DesiredCount: 0
      LaunchType: EC2

  FactoryServiceV01411:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_14_11"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      Cluster: !Sub "${ResourceNamePrefix}"
      TaskDefinition: !Ref FactoryTaskV01411
      DesiredCount: 0
      LaunchType: EC2

  FactoryServiceV0155:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotfactory_0_15_5"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      Cluster: !Sub "${ResourceNamePrefix}"
      TaskDefinition: !Ref FactoryTaskV0155
      DesiredCount: 0
      LaunchType: EC2

  #
  # Ansible containers
  #
  AnsibleTaskV250:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - PreinstallCheck
      - TeIamParameters
      - TefIamParameters
    Properties:
      Family: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotansible_2_5_0"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !GetAtt [TeIamParameters, factory_task_exec_role]
      TaskRoleArn: !GetAtt [TefIamParameters, runnable_role_in_region]
      # Volumes:
      #   - Name: turbotdata
      #     Host:
      #       SourcePath: /opt/turbot

      ContainerDefinitions:
        - Name: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotansible_2_5_0"
            -  SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
          # Use the image from our portfolio store for this release phase and region.
          Image: !Sub
            - "${PortfolioAccount}.dkr.ecr.${AWS::Region}.amazonaws.com/${ReleasePhase}/turbot:turbotturbotansible-${Version}-2.5.0"
            - PortfolioAccount: !If
                - IsGovCloud
                - !FindInMap [Constants, Portfolio, GovCloudAccountId]
                - !FindInMap [Constants, Portfolio, AccountId]
              Version: !FindInMap [Constants, Product, Version]

          DockerLabels:
            Vendor: !FindInMap [Constants, Turbot, EntityName]
            Product: !FindInMap [Constants, Product, Name]
            Version: !FindInMap [Constants, Product, Version]

          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinitions.html#cfn-ecs-taskdefinition-containerdefinition-memoryreservation
          MemoryReservation: 128

          # Our container does not require root / priveleged status.
          Privileged: false

          LinuxParameters:
            Tmpfs:
              - ContainerPath: /var/tmp
                MountOptions:
                  - rw
                  - exec
                Size: 50

          # MountPoints:
          #   - SourceVolume: turbotdata
          #     ContainerPath: /var/data
          #     ReadOnly: false

          # Temporary files are used during mod installation. Fargate does not support tmpfs or data volumes,
          # so we cannot do read only until we move to EC2 based or eliminate the need for the temp files.
          # TODO - Enable this per #20
          # Factory needs temporary file system for its Terraform operation.
          # we can now switch this on when we move to ECS EC2
          ReadonlyRootFilesystem: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ControlLogGroup
              # Logging to a central region is tempting, but would affect our regional redundancy pattern
              # so on balance we keep the logs in multiple regions.
              awslogs-region: !Ref "AWS::Region"

          Environment:
            - Name: TURBOT_VERSION
              Value: !FindInMap [Constants, Product, Version]
            - Name: TURBOT_FLAGS
              Value: !Ref FlagsSsmValue
            - Name: TURBOT_LOG_LEVEL
              Value: info

            - Name: TURBOT_PREFIX
              Value: !Ref ResourceNamePrefix

            - Name: TURBOT_RELEASE_PHASE
              Value: !Ref ReleasePhase

            # All of the regions where this Turbot installation is running
            - Name: TURBOT_REGIONS
              Value: !If
                - ImportFoundationRegions
                - !Join [",", !Ref RegionsSsmValue ]
                - !Join [",", !Ref FoundationRegions ]

            - Name: TURBOT_REGION
              Value: !Ref "AWS::Region"

            - Name: TURBOT_TMP_DIR
              Value: /var/tmp

            # We believe Amazon Linux 2 ECS Host no longer have this environment variable set by default
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"

            - Name: AWS_ACCOUNT_ID
              Value: !Ref "AWS::AccountId"

            # Proxy settings
            - Name: HTTP_PROXY
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: http_proxy
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: HTTPS_PROXY
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: https_proxy
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: NO_PROXY
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy
            - Name: no_proxy
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy

  AnsibleTaskV2921:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - PreinstallCheck
      - TeIamParameters
      - TefIamParameters
    Properties:
      Family: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotansible_2_9_21"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !GetAtt [TeIamParameters, factory_task_exec_role]
      TaskRoleArn: !GetAtt [TefIamParameters, runnable_role_in_region]
      # Volumes:
      #   - Name: turbotdata
      #     Host:
      #       SourcePath: /opt/turbot

      ContainerDefinitions:
        - Name: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotansible_2_9_21"
            -  SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
          # Use the image from our portfolio store for this release phase and region.
          Image: !Sub
            - "${PortfolioAccount}.dkr.ecr.${AWS::Region}.amazonaws.com/${ReleasePhase}/turbot:turbotturbotansible-${Version}-2.9.21"
            - PortfolioAccount: !If
                - IsGovCloud
                - !FindInMap [Constants, Portfolio, GovCloudAccountId]
                - !FindInMap [Constants, Portfolio, AccountId]
              Version: !FindInMap [Constants, Product, Version]

          DockerLabels:
            Vendor: !FindInMap [Constants, Turbot, EntityName]
            Product: !FindInMap [Constants, Product, Name]
            Version: !FindInMap [Constants, Product, Version]

          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ecs-taskdefinition-containerdefinitions.html#cfn-ecs-taskdefinition-containerdefinition-memoryreservation
          MemoryReservation: 128

          # Our container does not require root / priveleged status.
          Privileged: false

          LinuxParameters:
            Tmpfs:
              - ContainerPath: /var/tmp
                MountOptions:
                  - rw
                  - exec
                Size: 50

          # MountPoints:
          #   - SourceVolume: turbotdata
          #     ContainerPath: /var/data
          #     ReadOnly: false

          # Temporary files are used during mod installation. Fargate does not support tmpfs or data volumes,
          # so we cannot do read only until we move to EC2 based or eliminate the need for the temp files.
          # TODO - Enable this per #20
          # Factory needs temporary file system for its Terraform operation.
          # we can now switch this on when we move to ECS EC2
          ReadonlyRootFilesystem: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ControlLogGroup
              # Logging to a central region is tempting, but would affect our regional redundancy pattern
              # so on balance we keep the logs in multiple regions.
              awslogs-region: !Ref "AWS::Region"

          Environment:
            - Name: TURBOT_VERSION
              Value: !FindInMap [Constants, Product, Version]
            - Name: TURBOT_FLAGS
              Value: !Ref FlagsSsmValue
            - Name: TURBOT_LOG_LEVEL
              Value: info

            - Name: TURBOT_PREFIX
              Value: !Ref ResourceNamePrefix

            - Name: TURBOT_RELEASE_PHASE
              Value: !Ref ReleasePhase

            # All of the regions where this Turbot installation is running
            - Name: TURBOT_REGIONS
              Value: !If
                - ImportFoundationRegions
                - !Join [",", !Ref RegionsSsmValue ]
                - !Join [",", !Ref FoundationRegions ]

            - Name: TURBOT_REGION
              Value: !Ref "AWS::Region"

            - Name: TURBOT_TMP_DIR
              Value: /var/tmp

            # We believe Amazon Linux 2 ECS Host no longer have this environment variable set by default
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"

            - Name: AWS_ACCOUNT_ID
              Value: !Ref "AWS::AccountId"

            # Proxy settings
            - Name: HTTP_PROXY
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: http_proxy
              Value: !If
                - ImportHttpProxySsmValue
                - !Ref HttpProxySsmValue
                - !Ref FoundationEnvHttpProxy
            - Name: HTTPS_PROXY
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: https_proxy
              Value: !If
                - ImportHttpsProxySsmValue
                - !Ref HttpsProxySsmValue
                - !Ref FoundationEnvHttpsProxy
            - Name: NO_PROXY
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy
            - Name: no_proxy
              Value: !If
                - ImportNoProxySsmValue
                - !Ref NoProxySsmValue
                - !Ref FoundationEnvNoProxy

  AnsibleServiceV250:
      Type: AWS::ECS::Service
      DependsOn: LoadBalancerListener
      Properties:
        ServiceName: !Sub
          - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotansible_2_5_0"
          - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
        Cluster: !Sub "${ResourceNamePrefix}"
        TaskDefinition: !Ref AnsibleTaskV250
        DesiredCount: 0
        LaunchType: EC2

  AnsibleServiceV2921:
      Type: AWS::ECS::Service
      DependsOn: LoadBalancerListener
      Properties:
        ServiceName: !Sub
          - "${ResourceNamePrefix}_${SafeVersion}_turbotturbotansible_2_9_21"
          - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
        Cluster: !Sub "${ResourceNamePrefix}"
        TaskDefinition: !Ref AnsibleTaskV2921
        DesiredCount: 0
        LaunchType: EC2

  #
  # API Autoscaling
  #

  ApiTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - PreinstallCheck
      - TeIamParameters
    Properties:
      MaxCapacity: !If
        - ImportApiMaxScaling
        - !Ref ApiMaxScalingSsmValue
        - !Ref ApiMaxScaling
      MinCapacity: !If
        - ImportApiMinScaling
        - !Ref ApiMinScalingSsmValue
        - !Ref ApiMinScaling
      ResourceId: !Join ["/", [service, !Sub "${ResourceNamePrefix}", !GetAtt ApiService.Name]]
      RoleARN: !GetAtt [TeIamParameters, ecs_autoscaling_role]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ApiScaleUp:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ApiTarget
    Properties:
      PolicyName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_api_scale_up_policy"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      PolicyType: StepScaling
      ScalingTargetId: !Ref ApiTarget
      StepScalingPolicyConfiguration:
        Cooldown: 60
        MetricAggregationType: Maximum
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  ApiScaleUpAlarmForMemory:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: PreinstallCheck
    Properties:
      AlarmName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_api_high_memory_alarm"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      AlarmDescription: "Triggers scaling based on Memory utilization"
      Namespace: "AWS/ECS"
      MetricName: MemoryUtilization
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: ClusterName
          Value: !Sub "${ResourceNamePrefix}"
        - Name: ServiceName
          Value: !GetAtt ApiService.Name
      EvaluationPeriods: 2
      Period: 60
      Statistic: "Average"
      Threshold: 70
      AlarmActions:
        - !Ref ApiScaleUp

  ApiScaleDown:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ApiTarget
    Properties:
      PolicyName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_api_scale_down_policy"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      PolicyType: StepScaling
      ScalingTargetId: !Ref ApiTarget
      StepScalingPolicyConfiguration:
        Cooldown: 60
        MetricAggregationType: Maximum
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  ApiScaleDownAlarmForMemory:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: PreinstallCheck
    Properties:
      AlarmName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_api_low_memory_alarm"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      AlarmDescription: "Triggers scaling based on Memory utilization"
      Namespace: "AWS/ECS"
      MetricName: MemoryUtilization
      ComparisonOperator: "LessThanOrEqualToThreshold"
      Dimensions:
        - Name: ClusterName
          Value: !Sub "${ResourceNamePrefix}"
        - Name: ServiceName
          Value: !GetAtt ApiService.Name
      EvaluationPeriods: 2
      Period: 60
      Statistic: "Average"
      Threshold: 30
      AlarmActions:
        - !Ref ApiScaleDown

  #
  # Events Autoscaling
  #

  EventTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - PreinstallCheck
      - TeIamParameters
    Properties:
      MaxCapacity: !If
        - ImportApiMaxScaling
        - !Ref ApiMaxScalingSsmValue
        - !Ref ApiMaxScaling
      MinCapacity: !If
        - ImportApiMinScaling
        - !Ref ApiMinScalingSsmValue
        - !Ref ApiMinScaling
      ResourceId: !Join ["/", [service, !Sub "${ResourceNamePrefix}", !GetAtt EventService.Name]]
      RoleARN: !GetAtt [TeIamParameters, ecs_autoscaling_role]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  EventScaleUp:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: EventTarget
    Properties:
      PolicyName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_event_scale_up_policy"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      PolicyType: StepScaling
      ScalingTargetId: !Ref EventTarget
      StepScalingPolicyConfiguration:
        Cooldown: 60
        MetricAggregationType: Maximum
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  EventScaleUpAlarmForMemory:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: PreinstallCheck
    Properties:
      AlarmName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_event_high_memory_alarm"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      AlarmDescription: "Triggers scaling based on Memory utilization"
      Namespace: "AWS/ECS"
      MetricName: MemoryUtilization
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: ClusterName
          Value: !Sub "${ResourceNamePrefix}"
        - Name: ServiceName
          Value: !GetAtt EventService.Name
      EvaluationPeriods: 2
      Period: 60
      Statistic: "Average"
      Threshold: 70
      AlarmActions:
        - !Ref EventScaleUp

  EventScaleDown:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: EventTarget
    Properties:
      PolicyName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_event_scale_down_policy"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      PolicyType: StepScaling
      ScalingTargetId: !Ref EventTarget
      StepScalingPolicyConfiguration:
        Cooldown: 60
        MetricAggregationType: Maximum
        AdjustmentType: ChangeInCapacity
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  EventsScaleDownAlarmForMemory:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: PreinstallCheck
    Properties:
      AlarmName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_event_low_memory_alarm"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      AlarmDescription: "Triggers scaling based on Events Memory utilization"
      Namespace: "AWS/ECS"
      MetricName: MemoryUtilization
      ComparisonOperator: "LessThanOrEqualToThreshold"
      Dimensions:
        - Name: ClusterName
          Value: !Sub "${ResourceNamePrefix}"
        - Name: ServiceName
          Value: !GetAtt EventService.Name
      EvaluationPeriods: 2
      Period: 60
      Statistic: "Average"
      Threshold: 30
      AlarmActions:
        - !Ref EventScaleDown

  WorkerEventsLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - WorkerLogGroup
      - TefIamParameters
      - TefNetworkParameters
    Properties:
      FunctionName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_worker"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      Description: Turbot Worker Lambda
      ReservedConcurrentExecutions: !If
        - UseWorkerLambdaReservedConcurrencySsmValue
        - !Ref WorkerLambdaReservedConcurrencySsmValue
        - !Ref WorkerLambdaReservedConcurrency
      DeadLetterConfig:
        TargetArn: !GetAtt EventsDeadLetterQueue.Arn
      Code:
        S3Bucket: !Sub "turbot-software-${ReleasePhase}-${AWS::Region}"
        S3Key: !Sub
          - "te/${Version}/turbot-worker.zip"
          - Version: !FindInMap [Constants, Product, Version]
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt [TeIamParameters, worker_lambda_role]
      VpcConfig:
        SecurityGroupIds:
          - !If
            - ImportFoundationDatabaseSecurityGroup
            - !Ref DatabaseSecurityGroupSsmValue
            - !Ref FoundationDatabaseSecurityGroup
          - !If
            - UseFoundationOutboundInternetSecurityGroup
            - !If
              - UseCustomOutboundInternetSecurityGroup
              - !Ref OutboundInternetSecurityGroupSsmValue
              - !Ref OutboundInternetSecurityGroup
            - !Ref FoundationOutboundInternetSecurityGroup
          - !If
            - IsLdapSecurityGroupDefined
            - !GetAtt [TefNetworkParameters, ldap_security_group]
            - !Ref "AWS::NoValue"
          - !If
            - UseElastiCache
            - !GetAtt [TefNetworkParameters, cache_pair_security_group]
            - !Ref "AWS::NoValue"
        SubnetIds: !If
          - ImportTurbotSubnetIdsSsmValue
          - !Ref TurbotSubnetIdsSsmValue
          - !Ref TurbotApplicationSubnetIds
      MemorySize: !If
        - UseWorkerLambdaMemorySizeSsmValue
        - !Ref WorkerLambdaMemorySizeSsmValue
        - !Ref WorkerLambdaMemorySize
      Timeout: !If
        - UseWorkerLambdaTimeoutSsmValue
        - !Ref WorkerLambdaTimeoutSsmValue
        - !Ref WorkerLambdaTimeout
      Environment:
        Variables:
          # Turbot Configuration
          TURBOT_ENVIRONMENT: production
          TURBOT_VERSION: !FindInMap [Constants, Product, Version]
          TURBOT_FLAGS: !Ref FlagsSsmValue
          TURBOT_ALPHA_REGION_PARAMETER: !Ref AlphaRegionSsmValue
          TURBOT_PORTFOLIO_ACCOUNT: !If
            - IsGovCloud
            - !FindInMap [Constants, Portfolio, GovCloudAccountId]
            - !FindInMap [Constants, Portfolio, AccountId]

          TURBOT_SERVER_TYPE: worker
          TURBOT_LOG_LEVEL: info
          TURBOT_PREFIX: !Ref ResourceNamePrefix
          TURBOT_RELEASE_PHASE: !Ref ReleasePhase
          TURBOT_TRANSIENT_KMS_KEY: !If
            - ImportFoundationKeyAlias
            - !Ref KeyAliasSsmValue
            - !Ref FoundationKeyAlias

          TURBOT_RUNNABLE_ROLE: !GetAtt [TefIamParameters, runnable_role_in_region]
          TURBOT_RUNNABLE_IN_VPC_ROLE: !GetAtt [TefIamParameters, runnable_in_vpc_role_in_region]

          TURBOT_COLLECTIVE_DOMAIN: !If
            - ImportFoundationInstallationDomain
            - !Ref InstallationDomainSsmValue
            - !Ref FoundationInstallationDomain

          TURBOT_RDS_SSL_FILE: ./rds-combined-ca-bundle-2019.pem

          TURBOT_MAX_CONNECTIONS: !If
            - UseWorkerLambdaMaxDBConnectionsSsmValue
            - !Ref WorkerLambdaMaxDBConnectionsSsmValue
            - !Ref WorkerLambdaMaxDBConnections
          TURBOT_MAX_REPLICA_CONNECTIONS: !Ref APIContainerReplicaMaxDBConnections

          # All of the regions where this Turbot installation is running
          TURBOT_REGIONS: !If
            - ImportFoundationRegions
            - !Join [",", !Ref RegionsSsmValue ]
            - !Join [",", !Ref FoundationRegions ]

          # The specific region where this service is running
          TURBOT_REGION: !Ref "AWS::Region"

          # AWS Environment
          AWS_ACCOUNT_ID: !Ref "AWS::AccountId"

          OUTBOUND_SECURITY_GROUP_ID: !If
            - UseFoundationOutboundInternetSecurityGroup
            - !If
              - UseCustomOutboundInternetSecurityGroup
              - !Ref OutboundInternetSecurityGroupSsmValue
              - !Ref OutboundInternetSecurityGroup
            - !Ref FoundationOutboundInternetSecurityGroup

          NODE_TLS_REJECT_UNAUTHORIZED: !If [ AllowUseOfSelfSignedCertificate, "0", "" ]

          # Proxy settings
          HTTP_PROXY: !If
            - ImportHttpProxySsmValue
            - !Ref HttpProxySsmValue
            - !Ref FoundationEnvHttpProxy
          http_proxy: !If
            - ImportHttpProxySsmValue
            - !Ref HttpProxySsmValue
            - !Ref FoundationEnvHttpProxy
          HTTPS_PROXY: !If
            - ImportHttpsProxySsmValue
            - !Ref HttpsProxySsmValue
            - !Ref FoundationEnvHttpsProxy
          https_proxy: !If
            - ImportHttpsProxySsmValue
            - !Ref HttpsProxySsmValue
            - !Ref FoundationEnvHttpsProxy
          NO_PROXY: !If
            - ImportNoProxySsmValue
            - !Ref NoProxySsmValue
            - !Ref FoundationEnvNoProxy
          no_proxy: !If
            - ImportNoProxySsmValue
            - !Ref NoProxySsmValue
            - !Ref FoundationEnvNoProxy
          TURBOT_EVENT_KMS_KEY: !If
            - ImportFoundationKeyAlias
            - !Ref KeyAliasSsmValue
            - !Ref FoundationKeyAlias

          AWS_ORGANIZATION_ID: !GetAtt [TefParameters, organization_id]
          MAX_MEMORY: !If
            - UseModLambdaMaxMemorySsmValue
            - !Ref ModLambdaMaxMemorySsmValue
            - !Ref ModLambdaMaxMemory
          MAX_TIMEOUT: !If
            - UseModLambdaMaxTimeoutSsmValue
            - !Ref ModLambdaMaxTimeoutSsmValue
            - !Ref ModLambdaMaxTimeout
          OS_GUARDRAILS: !If
            - UseOSGuardrailsSsmValue
            - !Ref OSGuardrailsSsmValue
            - !Ref OSGuardrails

      Tags:
        - Key: Vendor
          Value: !FindInMap [Constants, Turbot, EntityName]
        - Key: Product
          Value: !FindInMap [Constants, Product, Name]
        - Key: Version
          Value: !FindInMap [Constants, Product, Version]

  #
  # Separate retry lambda so we don't exhaust the main event loop
  #
  WorkerEventsRetryLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - WorkerRetryLogGroup
      - TeIamParameters
      - TefIamParameters
      - TefNetworkParameters
    Properties:
      FunctionName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_worker_retry"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      Description: Turbot Worker Lambda for Events Retry
      ReservedConcurrentExecutions: !Ref WorkerRetryLambdaReservedConcurrency
      DeadLetterConfig:
        TargetArn: !GetAtt EventsDeadLetterQueue.Arn
      Code:
        S3Bucket: !Sub "turbot-software-${ReleasePhase}-${AWS::Region}"
        S3Key: !Sub
          - "te/${Version}/turbot-worker.zip"
          - Version: !FindInMap [Constants, Product, Version]
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt [TeIamParameters, worker_lambda_role]
      VpcConfig:
        SecurityGroupIds:
          - !If
            - ImportFoundationDatabaseSecurityGroup
            - !Ref DatabaseSecurityGroupSsmValue
            - !Ref FoundationDatabaseSecurityGroup
          - !If
            - UseFoundationOutboundInternetSecurityGroup
            - !If
              - UseCustomOutboundInternetSecurityGroup
              - !Ref OutboundInternetSecurityGroupSsmValue
              - !Ref OutboundInternetSecurityGroup
            - !Ref FoundationOutboundInternetSecurityGroup
          - !If
            - IsLdapSecurityGroupDefined
            - !GetAtt [TefNetworkParameters, ldap_security_group]
            - !Ref "AWS::NoValue"
          - !If
            - UseElastiCache
            - !GetAtt [TefNetworkParameters, cache_pair_security_group]
            - !Ref "AWS::NoValue"
        SubnetIds: !If
          - ImportTurbotSubnetIdsSsmValue
          - !Ref TurbotSubnetIdsSsmValue
          - !Ref TurbotApplicationSubnetIds
      MemorySize: !If
        - UseWorkerLambdaMemorySizeSsmValue
        - !Ref WorkerLambdaMemorySizeSsmValue
        - !Ref WorkerLambdaMemorySize
      Timeout: !If
        - UseWorkerLambdaTimeoutSsmValue
        - !Ref WorkerLambdaTimeoutSsmValue
        - !Ref WorkerLambdaTimeout
      Environment:
        Variables:
          # Turbot Configuration
          TURBOT_ENVIRONMENT: production
          TURBOT_VERSION: !FindInMap [Constants, Product, Version]
          TURBOT_FLAGS: !Ref FlagsSsmValue
          TURBOT_ALPHA_REGION_PARAMETER: !Ref AlphaRegionSsmValue
          TURBOT_PORTFOLIO_ACCOUNT: !If
            - IsGovCloud
            - !FindInMap [Constants, Portfolio, GovCloudAccountId]
            - !FindInMap [Constants, Portfolio, AccountId]

          TURBOT_SERVER_TYPE: worker
          TURBOT_LOG_LEVEL: info
          TURBOT_PREFIX: !Ref ResourceNamePrefix
          TURBOT_RELEASE_PHASE: !Ref ReleasePhase
          TURBOT_TRANSIENT_KMS_KEY: !If
            - ImportFoundationKeyAlias
            - !Ref KeyAliasSsmValue
            - !Ref FoundationKeyAlias

          TURBOT_RUNNABLE_ROLE: !GetAtt [TefIamParameters, runnable_role_in_region]
          TURBOT_RUNNABLE_IN_VPC_ROLE: !GetAtt [TefIamParameters, runnable_in_vpc_role_in_region]

          TURBOT_COLLECTIVE_DOMAIN: !If
            - ImportFoundationInstallationDomain
            - !Ref InstallationDomainSsmValue
            - !Ref FoundationInstallationDomain

          TURBOT_RDS_SSL_FILE: ./rds-combined-ca-bundle-2019.pem

          TURBOT_MAX_CONNECTIONS: !If
            - UseWorkerLambdaMaxDBConnectionsSsmValue
            - !Ref WorkerLambdaMaxDBConnectionsSsmValue
            - !Ref WorkerLambdaMaxDBConnections
          TURBOT_MAX_REPLICA_CONNECTIONS: !Ref APIContainerReplicaMaxDBConnections

          NODE_TLS_REJECT_UNAUTHORIZED: !If [ AllowUseOfSelfSignedCertificate, "0", "" ]

          # All of the regions where this Turbot installation is running
          TURBOT_REGIONS: !If
            - ImportFoundationRegions
            - !Join [",", !Ref RegionsSsmValue ]
            - !Join [",", !Ref FoundationRegions ]

          # The specific region where this service is running
          TURBOT_REGION: !Ref "AWS::Region"

          # AWS Environment
          AWS_ACCOUNT_ID: !Ref "AWS::AccountId"

          # Proxy settings
          HTTP_PROXY: !If
            - ImportHttpProxySsmValue
            - !Ref HttpProxySsmValue
            - !Ref FoundationEnvHttpProxy
          http_proxy: !If
            - ImportHttpProxySsmValue
            - !Ref HttpProxySsmValue
            - !Ref FoundationEnvHttpProxy
          HTTPS_PROXY: !If
            - ImportHttpsProxySsmValue
            - !Ref HttpsProxySsmValue
            - !Ref FoundationEnvHttpsProxy
          https_proxy: !If
            - ImportHttpsProxySsmValue
            - !Ref HttpsProxySsmValue
            - !Ref FoundationEnvHttpsProxy
          NO_PROXY: !If
            - ImportNoProxySsmValue
            - !Ref NoProxySsmValue
            - !Ref FoundationEnvNoProxy
          no_proxy: !If
            - ImportNoProxySsmValue
            - !Ref NoProxySsmValue
            - !Ref FoundationEnvNoProxy
          TURBOT_EVENT_KMS_KEY: !If
            - ImportFoundationKeyAlias
            - !Ref KeyAliasSsmValue
            - !Ref FoundationKeyAlias
          AWS_ORGANIZATION_ID: !GetAtt [TefParameters, organization_id]
          OS_GUARDRAILS: !If
            - UseOSGuardrailsSsmValue
            - !Ref OSGuardrailsSsmValue
            - !Ref OSGuardrails

      Tags:
        - Key: Vendor
          Value: !FindInMap [Constants, Turbot, EntityName]
        - Key: Product
          Value: !FindInMap [Constants, Product, Name]
        - Key: Version
          Value: !FindInMap [Constants, Product, Version]

  # This lambda has a different setting because we don't have a high visibility timeout in the
  # Events DLQ
  EventsDlqLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - EventsDlqLambdaLogGroup
      - TeIamParameters
      - TefIamParameters
      - TefNetworkParameters
    Properties:
      FunctionName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_events_dlq"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      Description: Turbot Events DLQ Handler
      ReservedConcurrentExecutions: !Ref EventsDlqLambdaReservedConcurrency
      Code:
        S3Bucket: !Sub "turbot-software-${ReleasePhase}-${AWS::Region}"
        S3Key: !Sub
          - "te/${Version}/turbot-worker.zip"
          - Version: !FindInMap [Constants, Product, Version]
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt [TeIamParameters, worker_lambda_role]
      VpcConfig:
        SecurityGroupIds:
          - !If
            - ImportFoundationDatabaseSecurityGroup
            - !Ref DatabaseSecurityGroupSsmValue
            - !Ref FoundationDatabaseSecurityGroup
          - !If
            - UseFoundationOutboundInternetSecurityGroup
            - !If
              - UseCustomOutboundInternetSecurityGroup
              - !Ref OutboundInternetSecurityGroupSsmValue
              - !Ref OutboundInternetSecurityGroup
            - !Ref FoundationOutboundInternetSecurityGroup
          - !If
            - UseElastiCache
            - !GetAtt [TefNetworkParameters, cache_pair_security_group]
            - !Ref "AWS::NoValue"
        SubnetIds: !If
          - ImportTurbotSubnetIdsSsmValue
          - !Ref TurbotSubnetIdsSsmValue
          - !Ref TurbotApplicationSubnetIds
      MemorySize: 2048
      Timeout: 60
      Environment:
        Variables:
          # Turbot Configuration
          TURBOT_ENVIRONMENT: production
          TURBOT_VERSION: !FindInMap [Constants, Product, Version]
          TURBOT_FLAGS: !Ref FlagsSsmValue
          TURBOT_ALPHA_REGION_PARAMETER: !Ref AlphaRegionSsmValue
          TURBOT_PORTFOLIO_ACCOUNT: !If
            - IsGovCloud
            - !FindInMap [Constants, Portfolio, GovCloudAccountId]
            - !FindInMap [Constants, Portfolio, AccountId]

          TURBOT_SERVER_TYPE: worker
          TURBOT_LOG_LEVEL: info
          TURBOT_PREFIX: !Ref ResourceNamePrefix
          TURBOT_RELEASE_PHASE: !Ref ReleasePhase
          TURBOT_TRANSIENT_KMS_KEY: !If
            - ImportFoundationKeyAlias
            - !Ref KeyAliasSsmValue
            - !Ref FoundationKeyAlias

          TURBOT_RUNNABLE_ROLE: !GetAtt [TefIamParameters, runnable_role_in_region]
          TURBOT_RUNNABLE_IN_VPC_ROLE: !GetAtt [TefIamParameters, runnable_in_vpc_role_in_region]

          TURBOT_COLLECTIVE_DOMAIN: !If
            - ImportFoundationInstallationDomain
            - !Ref InstallationDomainSsmValue
            - !Ref FoundationInstallationDomain

          TURBOT_RDS_SSL_FILE: ./rds-combined-ca-bundle-2019.pem

          TURBOT_MAX_CONNECTIONS: !If
            - UseWorkerLambdaMaxDBConnectionsSsmValue
            - !Ref WorkerLambdaMaxDBConnectionsSsmValue
            - !Ref WorkerLambdaMaxDBConnections
          TURBOT_MAX_REPLICA_CONNECTIONS: !Ref APIContainerReplicaMaxDBConnections

          NODE_TLS_REJECT_UNAUTHORIZED: !If [ AllowUseOfSelfSignedCertificate, "0", "" ]

          # All of the regions where this Turbot installation is running
          TURBOT_REGIONS: !If
            - ImportFoundationRegions
            - !Join [",", !Ref RegionsSsmValue ]
            - !Join [",", !Ref FoundationRegions ]

          # The specific region where this service is running
          TURBOT_REGION: !Ref "AWS::Region"

          # AWS Environment
          AWS_ACCOUNT_ID: !Ref "AWS::AccountId"

          # Proxy settings
          HTTP_PROXY: !If
            - ImportHttpProxySsmValue
            - !Ref HttpProxySsmValue
            - !Ref FoundationEnvHttpProxy
          http_proxy: !If
            - ImportHttpProxySsmValue
            - !Ref HttpProxySsmValue
            - !Ref FoundationEnvHttpProxy
          HTTPS_PROXY: !If
            - ImportHttpsProxySsmValue
            - !Ref HttpsProxySsmValue
            - !Ref FoundationEnvHttpsProxy
          https_proxy: !If
            - ImportHttpsProxySsmValue
            - !Ref HttpsProxySsmValue
            - !Ref FoundationEnvHttpsProxy
          NO_PROXY: !If
            - ImportNoProxySsmValue
            - !Ref NoProxySsmValue
            - !Ref FoundationEnvNoProxy
          no_proxy: !If
            - ImportNoProxySsmValue
            - !Ref NoProxySsmValue
            - !Ref FoundationEnvNoProxy
          TURBOT_EVENT_KMS_KEY: !If
            - ImportFoundationKeyAlias
            - !Ref KeyAliasSsmValue
            - !Ref FoundationKeyAlias

      Tags:
        - Key: Vendor
          Value: !FindInMap [Constants, Turbot, EntityName]
        - Key: Product
          Value: !FindInMap [Constants, Product, Name]
        - Key: Version
          Value: !FindInMap [Constants, Product, Version]

  RunnableDlqLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - RunnableDlqLambdaLogGroup
      - TeIamParameters
      - TefNetworkParameters
    Properties:
      FunctionName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_runnable_dlq"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      Description: Turbot Runnable DLQ Handler
      ReservedConcurrentExecutions: 5
      Code:
        S3Bucket: !Sub "turbot-software-${ReleasePhase}-${AWS::Region}"
        S3Key: !Sub
          - "te/${Version}/turbot-worker.zip"
          - Version: !FindInMap [Constants, Product, Version]
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt [TeIamParameters, worker_lambda_role]
      VpcConfig:
        SecurityGroupIds:
          - !If
            - ImportFoundationDatabaseSecurityGroup
            - !Ref DatabaseSecurityGroupSsmValue
            - !Ref FoundationDatabaseSecurityGroup
          - !If
            - UseFoundationOutboundInternetSecurityGroup
            - !If
              - UseCustomOutboundInternetSecurityGroup
              - !Ref OutboundInternetSecurityGroupSsmValue
              - !Ref OutboundInternetSecurityGroup
            - !Ref FoundationOutboundInternetSecurityGroup
          - !If
            - UseElastiCache
            - !GetAtt [TefNetworkParameters, cache_pair_security_group]
            - !Ref "AWS::NoValue"
        SubnetIds: !If
          - ImportTurbotSubnetIdsSsmValue
          - !Ref TurbotSubnetIdsSsmValue
          - !Ref TurbotApplicationSubnetIds
      MemorySize: 2048
      Timeout: 60
      Environment:
        Variables:
          # Turbot Configuration
          TURBOT_ENVIRONMENT: production
          TURBOT_VERSION: !FindInMap [Constants, Product, Version]
          TURBOT_FLAGS: !Ref FlagsSsmValue
          TURBOT_ALPHA_REGION_PARAMETER: !Ref AlphaRegionSsmValue
          TURBOT_PORTFOLIO_ACCOUNT: !If
            - IsGovCloud
            - !FindInMap [Constants, Portfolio, GovCloudAccountId]
            - !FindInMap [Constants, Portfolio, AccountId]

          TURBOT_SERVER_TYPE: worker
          TURBOT_LOG_LEVEL: info
          TURBOT_PREFIX: !Ref ResourceNamePrefix
          TURBOT_RELEASE_PHASE: !Ref ReleasePhase
          TURBOT_TRANSIENT_KMS_KEY: !If
            - ImportFoundationKeyAlias
            - !Ref KeyAliasSsmValue
            - !Ref FoundationKeyAlias

          TURBOT_RUNNABLE_ROLE: !GetAtt [TefIamParameters, runnable_role_in_region]
          TURBOT_RUNNABLE_IN_VPC_ROLE: !GetAtt [TefIamParameters, runnable_in_vpc_role_in_region]

          TURBOT_COLLECTIVE_DOMAIN: !If
            - ImportFoundationInstallationDomain
            - !Ref InstallationDomainSsmValue
            - !Ref FoundationInstallationDomain

          TURBOT_RDS_SSL_FILE: ./rds-combined-ca-bundle-2019.pem

          TURBOT_MAX_CONNECTIONS: !If
            - UseWorkerLambdaMaxDBConnectionsSsmValue
            - !Ref WorkerLambdaMaxDBConnectionsSsmValue
            - !Ref WorkerLambdaMaxDBConnections
          TURBOT_MAX_REPLICA_CONNECTIONS: !Ref APIContainerReplicaMaxDBConnections

          NODE_TLS_REJECT_UNAUTHORIZED: !If [ AllowUseOfSelfSignedCertificate, "0", "" ]

          # All of the regions where this Turbot installation is running
          TURBOT_REGIONS: !If
            - ImportFoundationRegions
            - !Join [",", !Ref RegionsSsmValue ]
            - !Join [",", !Ref FoundationRegions ]

          # The specific region where this service is running
          TURBOT_REGION: !Ref "AWS::Region"

          # AWS Environment
          AWS_ACCOUNT_ID: !Ref "AWS::AccountId"

          # Proxy settings
          HTTP_PROXY: !If
            - ImportHttpProxySsmValue
            - !Ref HttpProxySsmValue
            - !Ref FoundationEnvHttpProxy
          http_proxy: !If
            - ImportHttpProxySsmValue
            - !Ref HttpProxySsmValue
            - !Ref FoundationEnvHttpProxy
          HTTPS_PROXY: !If
            - ImportHttpsProxySsmValue
            - !Ref HttpsProxySsmValue
            - !Ref FoundationEnvHttpsProxy
          https_proxy: !If
            - ImportHttpsProxySsmValue
            - !Ref HttpsProxySsmValue
            - !Ref FoundationEnvHttpsProxy
          NO_PROXY: !If
            - ImportNoProxySsmValue
            - !Ref NoProxySsmValue
            - !Ref FoundationEnvNoProxy
          no_proxy: !If
            - ImportNoProxySsmValue
            - !Ref NoProxySsmValue
            - !Ref FoundationEnvNoProxy
          TURBOT_EVENT_KMS_KEY: !If
            - ImportFoundationKeyAlias
            - !Ref KeyAliasSsmValue
            - !Ref FoundationKeyAlias

      Tags:
        - Key: Vendor
          Value: !FindInMap [Constants, Turbot, EntityName]
        - Key: Product
          Value: !FindInMap [Constants, Product, Name]
        - Key: Version
          Value: !FindInMap [Constants, Product, Version]

  EventsQueueSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - EventsQueue
      - WorkerEventsLambda
    Properties:
      BatchSize: !If
        - UseWorkerLambdaMessageBatchSsmValue
        - !Ref WorkerLambdaMessageBatchSsmValue
        - !Ref WorkerLambdaMessageBatch
      Enabled: true
      EventSourceArn: !GetAtt EventsQueue.Arn
      FunctionName: !GetAtt WorkerEventsLambda.Arn

  EventsRetryQueueSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - EventsRetryQueue
      - WorkerEventsRetryLambda
    Properties:
      # This MUST bet set to 1, do not change this to parameter
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt EventsRetryQueue.Arn
      FunctionName: !GetAtt WorkerEventsRetryLambda.Arn

  EventsDeadLetterQueueSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - EventsDeadLetterQueue
      - EventsDlqLambda
    Properties:
      BatchSize: !Ref EventsDlqMessageBatch
      Enabled: true
      EventSourceArn: !GetAtt EventsDeadLetterQueue.Arn
      FunctionName: !GetAtt EventsDlqLambda.Arn

  # Multiple Lambda functions for each SQS trigger. We need this because the handler needs to be version
  # specific while the queue is version agnostic. According to this thread below it will be "random".
  #
  # https://forums.aws.amazon.com/message.jspa?messageID=857349

  #
  # This mapping to be removed when all controls have migrated to runnable_dlq
  #
  ControlDeadLetterQueueSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - RunnableDlqLambda
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ResourceNamePrefix}_lambda_runnable_dlq
      FunctionName: !GetAtt RunnableDlqLambda.Arn

  #
  # This is the strategic event source mapping
  #
  RunnableDeadLetterQueueSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    DependsOn:
      - RunnableDlqLambda
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${ResourceNamePrefix}_runnable_dlq
      FunctionName: !GetAtt RunnableDlqLambda.Arn

  #
  # Workspace Manager
  #


  WorkspaceManager:
    Type: AWS::Lambda::Function
    DependsOn:
      - WorkspaceManagerLogGroup
      - TeIamParameters
      - TefNetworkParameters
    Properties:
      FunctionName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_workspace_manager"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      Description: Turbot Workspace Manager CloudFormation Custom Resource handler.
      Code:
        S3Bucket: !Sub "turbot-software-${ReleasePhase}-${AWS::Region}"
        S3Key: !Sub
          - "te/${Version}/turbot-workspace.zip"
          - Version: !FindInMap [Constants, Product, Version]
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt [TeIamParameters, workspace_manager_te_execution_role]
      VpcConfig:
        SecurityGroupIds:
          - !If
            - ImportFoundationDatabaseSecurityGroup
            - !Ref DatabaseSecurityGroupSsmValue
            - !Ref FoundationDatabaseSecurityGroup
          - !If
            - UseFoundationOutboundInternetSecurityGroup
            - !If
              - UseCustomOutboundInternetSecurityGroup
              - !Ref OutboundInternetSecurityGroupSsmValue
              - !Ref OutboundInternetSecurityGroup
            - !Ref FoundationOutboundInternetSecurityGroup
          - !If
            - UseElastiCache
            - !GetAtt [TefNetworkParameters, cache_pair_security_group]
            - !Ref "AWS::NoValue"
        SubnetIds: !If
          - ImportTurbotSubnetIdsSsmValue
          - !Ref TurbotSubnetIdsSsmValue
          - !Ref TurbotApplicationSubnetIds
      MemorySize: 1024
      # Maximum execution time for long running script to migrate notification data.
      Timeout: 900
      Environment:
        Variables:
          AWS_ACCOUNT_ID: !Ref "AWS::AccountId"

          # Set the environment for the kit, which is always production when installed in AWS
          TURBOT_ENVIRONMENT: production
          TURBOT_PREFIX: !Ref ResourceNamePrefix
          TURBOT_RELEASE_PHASE: !Ref ReleasePhase
          TURBOT_TRANSIENT_KMS_KEY: !If
            - ImportFoundationKeyAlias
            - !Ref KeyAliasSsmValue
            - !Ref FoundationKeyAlias

          TURBOT_VERSION: !FindInMap [Constants, Product, Version]
          TURBOT_FLAGS: !Ref FlagsSsmValue

          NODE_TLS_REJECT_UNAUTHORIZED: !If [ AllowUseOfSelfSignedCertificate, "0", "" ]

          MINIMUM_PREVIOUS_WORKSPACE_VERSION: !FindInMap [Constants, RequiredVersions, TEPreviousWorkspaceVersion]

          TURBOT_INSTALLATION_DOMAIN: !If
            - ImportFoundationInstallationDomain
            - !Ref InstallationDomainSsmValue
            - !Ref FoundationInstallationDomain

          TURBOT_REGION: !Ref "AWS::Region"

          TURBOT_REGIONS: !If
            - ImportFoundationRegions
            - !Join [",", !Ref RegionsSsmValue ]
            - !Join [",", !Ref FoundationRegions ]

          HTTP_PROXY: !If
            - ImportHttpProxySsmValue
            - !Ref HttpProxySsmValue
            - !Ref FoundationEnvHttpProxy
          http_proxy: !If
            - ImportHttpProxySsmValue
            - !Ref HttpProxySsmValue
            - !Ref FoundationEnvHttpProxy
          HTTPS_PROXY: !If
            - ImportHttpsProxySsmValue
            - !Ref HttpsProxySsmValue
            - !Ref FoundationEnvHttpsProxy
          https_proxy: !If
            - ImportHttpsProxySsmValue
            - !Ref HttpsProxySsmValue
            - !Ref FoundationEnvHttpsProxy
          NO_PROXY: !If
            - ImportNoProxySsmValue
            - !Ref NoProxySsmValue
            - !Ref FoundationEnvNoProxy
          no_proxy: !If
            - ImportNoProxySsmValue
            - !Ref NoProxySsmValue
            - !Ref FoundationEnvNoProxy
          OS_GUARDRAILS: !If
            - UseOSGuardrailsSsmValue
            - !Ref OSGuardrailsSsmValue
            - !Ref OSGuardrails
      Tags:
        - Key: Vendor
          Value: !FindInMap [Constants, Turbot, EntityName]
        - Key: Product
          Value: !FindInMap [Constants, Product, Name]
        - Key: Version
          Value: !FindInMap [Constants, Product, Version]

  #
  # Preinstallation
  #

  PreinstallCheck:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ResourceNamePrefix}_preinstall_checker"
      TEDRequiredVersion: !FindInMap [Constants, RequiredVersions, TED]
      TEFRequiredVersion: !FindInMap [Constants, RequiredVersions, TEF]
      Version: !FindInMap [Constants, Product, Version]

  #
  # TEF Parameter Roles Custom Stack
  #

  TefIamParameters:
    Type: Custom::CustomResource
    DependsOn: PreinstallCheck
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ResourceNamePrefix}_parameters"
      Version: !FindInMap [Constants, Product, Version]
      CallingEntity: "TE"
      Trigger: !Ref ParameterDeploymentTrigger
      Parameters:
        - runnable_role_in_region
        - runnable_in_vpc_role_in_region

  TefNetworkParameters:
    Type: Custom::CustomResource
    DependsOn: PreinstallCheck
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ResourceNamePrefix}_parameters"
      Version: !FindInMap [Constants, Product, Version]
      CallingEntity: "TE"
      TeVersion: !FindInMap [Constants, Product, Version]
      Trigger: !Ref ParameterDeploymentTrigger
      Parameters:
        - alb_log_prefix
        - alb_idle_timeout
        - cache_pair_security_group
        - ldap_security_group

  TeIamParameters:
    Type: Custom::CustomResource
    DependsOn:
      - PreinstallCheck
      - IamParametersStack
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ResourceNamePrefix}_parameters"
      Version: !FindInMap [Constants, Product, Version]
      CallingEntity: "TE"
      TeVersion: !FindInMap [Constants, Product, Version]
      Trigger: !Ref ParameterDeploymentTrigger
      Parameters:
        - task_exec_role
        - task_role
        - factory_task_exec_role
        - ecs_autoscaling_role
        - maintenance_container_role
        - worker_lambda_role
        - workspace_manager_te_execution_role

  TefParameters:
    Type: Custom::CustomResource
    DependsOn: PreinstallCheck
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ResourceNamePrefix}_parameters"
      Version: !FindInMap [Constants, Product, Version]
      CallingEntity: "TE"
      Parameters:
        - organization_id
      ParameterDeploymentTrigger: !Ref ParameterDeploymentTrigger

  SqsSnsPolicyUpdate:
    Type: Custom::CustomResource
    DependsOn: EventsQueuePolicy
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ResourceNamePrefix}_policy_parameter"
      Version: !FindInMap [Constants, Product, Version]
      CallingEntity: "TE"
      Queues:
        - !Ref EventsQueue
        - !Ref EventsRetryQueue
        - !Ref EventsDeadLetterQueue
      Topics:
        - !Ref EventsTopic
        - !Ref TurbotEnterpriseAlarmsTopic
      ParameterDeploymentTrigger: !Ref ParameterDeploymentTrigger

  S3BucketArnList:
    Type: Custom::CustomResource
    DependsOn: PreinstallCheck
    Properties:
      ServiceToken: !Sub "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ResourceNamePrefix}_s3_bucket_arns"
      Version: !FindInMap [Constants, Product, Version]
      CallingEntity: "TE"
      Parameters:
        - { Bucket: "turbot-software", Resource: "te/*" }
        - { Bucket: "log,process-log,hive" }
        - { Bucket: "log,process-log,hive", Resource: "*" }
        - { Bucket: "log,hive", Resource: "temp/*" }
        - { Bucket: "process-log", Resource: "*" }
      ParameterDeploymentTrigger: !Ref ParameterDeploymentTrigger

  TurbotResponseTimeAlarm:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: PreinstallCheck
    Properties:
      AlarmName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_turbot_response_time_alarm"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      AlarmDescription: "Triggers alarm based on Turbot Response Time"
      Namespace: "AWS/ApplicationELB"
      MetricName: TargetResponseTime
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
      EvaluationPeriods: 1
      Period: 60
      Statistic: "Average"
      Threshold: 3
      AlarmActions:
        - !Ref TurbotEnterpriseAlarmsTopic

  ELB5xxErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: PreinstallCheck
    Properties:
      AlarmName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_elb_5xx_error_alarm"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      AlarmDescription: "Triggers alarm based on ELB 5xx errors"
      Namespace: "AWS/ApplicationELB"
      MetricName: HTTPCode_ELB_5XX_Count
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt LoadBalancer.LoadBalancerFullName
      EvaluationPeriods: 1
      Period: 60
      Statistic: "Maximum"
      Threshold: 3
      AlarmActions:
        - !Ref TurbotEnterpriseAlarmsTopic

  WorkerLambdaDurationAlarm:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: PreinstallCheck
    Properties:
      AlarmName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_worker_lambda_duration_alarm"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      AlarmDescription: "Triggers alarm based on Worker Lambda duration"
      Namespace: "AWS/Lambda"
      MetricName: Duration
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: FunctionName
          Value: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_worker"
            - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      EvaluationPeriods: 1
      Period: 60
      Statistic: "Maximum"
      Threshold: 350000
      AlarmActions:
        - !Ref TurbotEnterpriseAlarmsTopic

  WorkerLambdaErrorAlarm:
    Type: "AWS::CloudWatch::Alarm"
    DependsOn: PreinstallCheck
    Properties:
      AlarmName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_worker_lambda_error_alarm"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      AlarmDescription: "Triggers alarm based on Worker Lambda errors"
      Namespace: "AWS/Lambda"
      MetricName: Errors
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: FunctionName
          Value: !Sub
            - "${ResourceNamePrefix}_${SafeVersion}_worker"
            - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
      EvaluationPeriods: 1
      Period: 60
      Statistic: "Maximum"
      Threshold: 2
      AlarmActions:
        - !Ref TurbotEnterpriseAlarmsTopic

  #
  # Dashboard
  #

  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub
        - "${ResourceNamePrefix}_${SafeVersion}_${Region}"
        - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]
          Region: !Join [ "_", !Split [ "-", !Ref "AWS::Region" ] ]
      DashboardBody: !Join
        - ""
        -
          - |
            { "widgets": [

          - !Join
            - ","
            -

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 0,
                    "y": 0,
                    "width": 24,
                    "height": 2,
                    "properties": {
                      "markdown": "# Events & Workers [${AWS::Region}]"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 2,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/SQS", "NumberOfMessagesReceived", "QueueName", "${QueueName}", { "stat": "Sum", "period": 300, "color": "#ff7f0e" } ],
                        [ "AWS/SQS", "NumberOfMessagesSent",     "QueueName", "${QueueName}", { "stat": "Sum", "period": 300, "color": "#990000" } ],
                        [ "AWS/SQS", "NumberOfMessagesDeleted",  "QueueName", "${QueueName}", { "stat": "Sum", "period": 300, "color": "#009900" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "title": "Events Queue Activity",
                      "period": 300,
                      "yAxis": {
                        "left": {
                          "min": 0
                        }
                      }
                    }
                  }
                - QueueName: !GetAtt EventsQueue.QueueName

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 2,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "_The Events Queue is the heart of running controls, actions, calculated policies, notifications and all worker tasks._\n\n**Healthy**: Tasks done (green) will match exactly tasks planned (red) and tasks attempted (orange). There may be spikes in load, but generally the chart appears as a single steady line. By design, Turbot should have very few events when there is no activity in the environment.\n\n**Overloaded**: Tasks planned (red) exceeds tasks done (green) for a sustained period, creating a backlog of work.\n\n**High Task Retry Rate**: Tasks attempted (orange) is at a sustained, high level. Retries happen occasionally (e.g. throttling) but ongoing levels usually indicate a noisy mod or control.\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 8,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/SQS", "ApproximateNumberOfMessagesDelayed",    "QueueName", "${QueueName}", { "color": "#999999" } ],
                        [ "AWS/SQS", "ApproximateNumberOfMessagesVisible",    "QueueName", "${QueueName}", { "color": "#990000" } ],
                        [ "AWS/SQS", "ApproximateNumberOfMessagesNotVisible", "QueueName", "${QueueName}", { "color": "#ff7f0e" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": true,
                      "region": "${AWS::Region}",
                      "yAxis": {
                        "left": {
                          "min": 0
                        }
                      },
                      "annotations": {
                          "horizontal": [
                              {
                                  "label": "Number of messages visible alarm threshold.",
                                  "value": 5000
                              }
                          ]
                      },
                      "title": "Events Queue Backlog"
                    }
                  }
                - QueueName: !GetAtt EventsQueue.QueueName

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 8,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "_Events queue backlog shows any buildup of tasks, often visible as slower processing and handling._\n\n**Healthy**: Backlog (red) and running tasks (orange) are low (often zero) with short buildups (< 30 mins) associated with events like resource imports, mod updates, etc.\n\n**Overloaded**: Sustained backlog growth (red) indicating that ECS workers cannot keep up with incoming events. Increase capacity or check for a flood of unnecessary events.\n\n**Stalled processing**: Running tasks (orange) appear for long periods. Typically indicates a misconfigured mod failing to terminate the task.\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 14,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/Lambda", "Duration", "FunctionName", "${ResourceNamePrefix}_${SafeVersion}_worker", { "period": 60, "color": "#cc66cc" } ],
                        [ "...", { "stat": "p90" } ],
                        [ "...", { "stat": "p99" } ],
                        [ "...", { "stat": "Maximum" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "title": "Worker Lambda - Duration",
                      "period": 300,
                      "yAxis": {
                        "left": {
                          "min": 0
                        }
                      },
                      "stat": "Average"
                    }
                  }
                - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 14,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "_The amount of time that worker lambda function code spends processing an event. The billed duration for an invocation is the value rounded up to the nearest millisecond._\n\n**Healthy:** All metrics are consistently low with a relatively small difference from Average to p90 and p99. Occasional, non-periodic spikes on the Max metric are okay.\n\n**Periodic Slow Running Queries:** If the max metric is high but all other metrics are low, this indicates that a single or small set of queries are taking a long time. Investigate by looking at the Worker Lambda CloudWatch for durations matching the Max metric.\n\n**Large Spread in Metrics:** A large spread in metrics from Avg to p90, p99 and Max indicates a greater portion of Worker Lambda runs are taking longer."
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 20,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/Lambda", "Throttles", "FunctionName", "${ResourceNamePrefix}_${SafeVersion}_worker" ],
                        [ ".", "Invocations", ".", "." ],
                        [ ".", "ConcurrentExecutions", ".", ".", { "stat": "Maximum", "yAxis": "right" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "title": "Worker Lambda - Concurrent Executions, Invocations, Throttles",
                      "period": 60,
                      "yAxis": {
                        "left": {
                          "min": 0
                        },
                        "right": {
                          "min": 0
                        }
                      },
                      "stat": "Sum"
                    }
                  }
                - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 20,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "**ConcurrentExecutions:** The number of function instances that are processing events. If this number reaches the concurrent executions quota for the Region, or the reserved concurrency limit, configured on the function, additional invocation requests are throttled.\n\n**Invocations:** The number of times worker function code is executed, including successful executions and executions that result in a function error. Invocations aren't recorded if the invocation request is throttled or otherwise resulted in an invocation error. This equals the number of requests billed.\n\n**Throttles:** Worker throttles shows the count of throttled invocation like control running and calculated policies."
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 26,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/Lambda", "Duration", "FunctionName", "${ResourceNamePrefix}_${SafeVersion}_worker_retry", { "period": 60, "color": "#cc66cc" } ],
                        [ "...", { "stat": "p90" } ],
                        [ "...", { "stat": "p99" } ],
                        [ "...", { "stat": "Maximum" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "title": "Worker Retry Lambda - Duration",
                      "period": 300,
                      "yAxis": {
                        "left": {
                          "min": 0
                        }
                      },
                      "stat": "Average"
                    }
                  }
                - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 26,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "_The amount of time that worker retry lambda function code spends processing an event. The billed duration for an invocation is the value rounded up to the nearest millisecond._"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 32,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/Lambda", "Throttles", "FunctionName", "${ResourceNamePrefix}_${SafeVersion}_worker_retry" ],
                        [ ".", "Invocations", ".", "." ],
                        [ ".", "ConcurrentExecutions", ".", ".", { "stat": "Maximum", "yAxis": "right" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "title": "Worker Retry Lambda - Concurrent Executions, Invocations, Throttles",
                      "period": 60,
                      "yAxis": {
                        "left": {
                          "min": 0
                        },
                        "right": {
                          "min": 0
                        }
                      },
                      "stat": "Sum"
                    }
                  }
                - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 32,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "**ConcurrentExecutions:** The number of function instances that are processing events. If this number reaches the concurrent executions quota for the Region, or the reserved concurrency limit, configured on the function, additional invocation requests are throttled.\n\n**Invocations:** The number of times worker function code is executed, including successful executions and executions that result in a function error. Invocations aren't recorded if the invocation request is throttled or otherwise resulted in an invocation error. This equals the number of requests billed.\n\n**Throttles:** Worker throttles shows the count of throttled invocation like control running and calculated policies."
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 38,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/Lambda", "Duration", "FunctionName", "${ResourceNamePrefix}_${SafeVersion}_events_dlq", { "period": 60, "color": "#cc66cc" } ],
                        [ "...", { "stat": "p90" } ],
                        [ "...", { "stat": "p99" } ],
                        [ "...", { "stat": "Maximum" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "title": "Events DLQ Lambda - Duration",
                      "period": 300,
                      "yAxis": {
                        "left": {
                          "min": 0
                        }
                      },
                      "stat": "Average"
                    }
                  }
                - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 38,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "_The amount of time that events dlq lambda function code spends processing an event. The billed duration for an invocation is the value rounded up to the nearest millisecond._"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 44,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/Lambda", "Throttles", "FunctionName", "${ResourceNamePrefix}_${SafeVersion}_events_dlq" ],
                        [ ".", "Invocations", ".", "." ],
                        [ ".", "ConcurrentExecutions", ".", ".", { "stat": "Maximum", "yAxis": "right" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "title": "Events DLQ Lambda - Concurrent Executions, Invocations, Throttles",
                      "period": 60,
                      "yAxis": {
                        "left": {
                          "min": 0
                        },
                        "right": {
                          "min": 0
                        }
                      },
                      "stat": "Sum"
                    }
                  }
                - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 44,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "**ConcurrentExecutions:** The number of function instances that are processing events. If this number reaches the concurrent executions quota for the Region, or the reserved concurrency limit, configured on the function, additional invocation requests are throttled.\n\n**Invocations:** The number of times worker function code is executed, including successful executions and executions that result in a function error. Invocations aren't recorded if the invocation request is throttled or otherwise resulted in an invocation error. This equals the number of requests billed.\n\n**Throttles:** Worker throttles shows the count of throttled invocation like control running and calculated policies."
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 50,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/Lambda", "Duration", "FunctionName", "${ResourceNamePrefix}_${SafeVersion}_runnable_dlq", { "period": 60, "color": "#cc66cc" } ],
                        [ "...", { "stat": "p90" } ],
                        [ "...", { "stat": "p99" } ],
                        [ "...", { "stat": "Maximum" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "title": "Runnable DLQ Lambda - Duration",
                      "period": 300,
                      "yAxis": {
                        "left": {
                          "min": 0
                        }
                      },
                      "stat": "Average"
                    }
                  }
                - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 50,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "_The amount of time that runnable dlq lambda function code spends processing an event. The billed duration for an invocation is the value rounded up to the nearest millisecond._"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 56,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/Lambda", "Throttles", "FunctionName", "${ResourceNamePrefix}_${SafeVersion}_runnable_dlq" ],
                        [ ".", "Invocations", ".", "." ],
                        [ ".", "ConcurrentExecutions", ".", ".", { "stat": "Maximum", "yAxis": "right" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "title": "Runnable DLQ Lambda - Concurrent Executions, Invocations, Throttles",
                      "period": 60,
                      "yAxis": {
                        "left": {
                          "min": 0
                        },
                        "right": {
                          "min": 0
                        }
                      },
                      "stat": "Sum"
                    }
                  }
                - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 56,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "**ConcurrentExecutions:** The number of function instances that are processing events. If this number reaches the concurrent executions quota for the Region, or the reserved concurrency limit, configured on the function, additional invocation requests are throttled.\n\n**Invocations:** The number of times worker function code is executed, including successful executions and executions that result in a function error. Invocations aren't recorded if the invocation request is throttled or otherwise resulted in an invocation error. This equals the number of requests billed.\n\n**Throttles:** Worker throttles shows the count of throttled invocation like control running and calculated policies."
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 0,
                    "y": 62,
                    "width": 24,
                    "height": 2,
                    "properties": {
                      "markdown": "# API [${AWS::Region}]"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 64,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/ApplicationELB", "HTTPCode_ELB_5XX_Count",    "LoadBalancer", "${LoadBalancerFullName}", { "stat": "Sum", "period": 60, "color": "#ff7f0e" } ],
                        [ "AWS/ApplicationELB", "HTTPCode_Target_5XX_Count", "LoadBalancer", "${LoadBalancerFullName}", { "stat": "Sum", "period": 60, "color": "#990000" } ],
                        [ "AWS/ApplicationELB", "RequestCount",              "LoadBalancer", "${LoadBalancerFullName}", { "stat": "Sum", "period": 60, "color": "#000099" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "title": "Load Balancer",
                      "period": 300,
                      "yAxis": {
                        "right": {
                          "min": 0
                        },
                        "left": {
                          "min": 0
                        }
                      }
                    }
                  }
                - LoadBalancerFullName: !GetAtt LoadBalancer.LoadBalancerFullName

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 64,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "_Incoming requests to the ALB, including both UI and events._\n\n**Healthy**: Steady low traffic with occasional bursts for online users.\n\n**Event flood**: Sustained high volume of requests, indicating a noisy publisher.\n\n**Instability**: Many 5XX errors, continuing over time."
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 70,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/ApplicationELB", "UnHealthyHostCount", "LoadBalancer", "${LoadBalancerFullName}", "TargetGroup", "${TargetGroupName}", { "stat": "Average", "period": 60, "color": "#000099" } ],
                        [ "AWS/ApplicationELB", "HealthyHostCount", "LoadBalancer", "${LoadBalancerFullName}", "TargetGroup", "${TargetGroupName}", { "stat": "Average", "period": 60 } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "annotations": {
                          "horizontal": [
                              {
                                  "label": "Unhealthy host count",
                                  "value": 1
                              }
                          ]
                      },
                      "region": "${AWS::Region}",
                      "title": "API Unhealthy Host Count",
                      "yAxis": {
                        "right": {
                          "min": 0
                        },
                        "left": {
                          "min": 0
                        }
                      }
                    }
                  }
                - LoadBalancerFullName: !GetAtt LoadBalancer.LoadBalancerFullName
                  TargetGroupName: !GetAtt LoadBalancerHttpsTargetGroup.TargetGroupFullName

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 70,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "_The number of unhealthy instances registered with the load balancer. An instance is considered unhealthy after it exceeds the unhealthy threshold configured for health checks._\n\n**Healthy**: The unhealthy host count is often zero.\n\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 76,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/ApplicationELB", "UnHealthyHostCount", "LoadBalancer", "${LoadBalancerFullName}", "TargetGroup", "${TargetGroupName}", { "stat": "Average", "period": 60, "color": "#000099" } ],
                        [ "AWS/ApplicationELB", "HealthyHostCount", "LoadBalancer", "${LoadBalancerFullName}", "TargetGroup", "${TargetGroupName}", { "stat": "Average", "period": 60 } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "annotations": {
                          "horizontal": [
                              {
                                  "label": "Unhealthy host count",
                                  "value": 1
                              }
                          ]
                      },
                      "region": "${AWS::Region}",
                      "title": "Events Unhealthy Host Count",
                      "yAxis": {
                        "right": {
                          "min": 0
                        },
                        "left": {
                          "min": 0
                        }
                      }
                    }
                  }
                - LoadBalancerFullName: !GetAtt LoadBalancer.LoadBalancerFullName
                  TargetGroupName: !GetAtt LoadBalancerEventsTargetGroup.TargetGroupFullName

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 76,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "_The number of unhealthy instances registered with the load balancer. An instance is considered unhealthy after it exceeds the unhealthy threshold configured for health checks._\n\n**Healthy**: The unhealthy host count is often zero.\n\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 82,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/ApplicationELB", "TargetResponseTime", "LoadBalancer", "${LoadBalancerFullName}", { "stat": "Maximum", "period": 60, "color": "#990000" } ],
                        [ "...", { "stat": "Average", "period": 60, "color": "#ff7f0e" } ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "yAxis": {
                        "left": {
                          "min": 0
                        }
                      },
                      "title": "Turbot Response Time"
                    }
                  }
                - LoadBalancerFullName: !GetAtt LoadBalancer.LoadBalancerFullName

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 82,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "_Response Time for API & UI requests to the ALB._\n\n**Healthy**: Steady, low response times below 1s. Includes periods with no data / traffic.\n\n**Hot Spots**: Spikes of slow performance, indicating overloading or slow handling."
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 88,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/ECS", "MemoryUtilization", "ServiceName", "${ResourceNamePrefix}_${SafeVersion}_api", "ClusterName", "${ResourceNamePrefix}" ],
                        [ "AWS/ECS", "CPUUtilization",    "ServiceName", "${ResourceNamePrefix}_${SafeVersion}_api", "ClusterName", "${ResourceNamePrefix}" ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "title": "API CPU & Memory Utilization %",
                      "period": 300,
                      "yAxis": {
                        "left": {
                          "min": 0
                        }
                      }
                    }
                  }
                - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 88,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "_API utilization shows the level of work being done by the web layer for UI requests and external events._\n\n**Healthy**: CPU will be generally low, with occasional short spikes of activity related to event spikes or large simultaneous users. Memory utilization should be consistently low and stable.\n\n**Underprovisioned**: CPU utilization is high for sustained periods, leading to a backlog of events.\n\n**Memory Leak**: Gradual linear buildup in memory utilization leading to a crash."
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 94,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "metrics": [
                        [ "AWS/ECS", "MemoryUtilization", "ServiceName", "${ResourceNamePrefix}_${SafeVersion}_events", "ClusterName", "${ResourceNamePrefix}" ],
                        [ "AWS/ECS", "CPUUtilization",    "ServiceName", "${ResourceNamePrefix}_${SafeVersion}_events", "ClusterName", "${ResourceNamePrefix}" ]
                      ],
                      "view": "timeSeries",
                      "stacked": false,
                      "region": "${AWS::Region}",
                      "title": "Events CPU & Memory Utilization %",
                      "period": 300,
                      "yAxis": {
                        "left": {
                          "min": 0
                        }
                      }
                    }
                  }
                - SafeVersion: !Join [ "_", !Split [ ".", !Join [ "_", !Split [ "-", !FindInMap [Constants, Product, Version] ] ] ] ]

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 94,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "_Events utilization shows the level of work being done by the web layer for external events._\n\n**Healthy**: CPU will be generally low, with occasional short spikes of activity related to event spikes or large simultaneous users. Memory utilization should be consistently low and stable.\n\n**Underprovisioned**: CPU utilization is high for sustained periods, leading to a backlog of events.\n\n**Memory Leak**: Gradual linear buildup in memory utilization leading to a crash."
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 0,
                    "y": 100,
                    "width": 24,
                    "height": 2,
                    "properties": {
                      "markdown": "# Activity & Errors [${AWS::Region}]"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 102,
                    "width": 15,
                    "height": 3,
                    "properties": {
                      "query": "SOURCE '${LogGroup}' | filter @message like /Uncaught Exception/\n| stats count(*) as Exceptions by bin(1h) as Period\n| sort Exceptions desc | limit 10",
                      "region": "${AWS::Region}",
                      "title": "API Uncaught Exception"
                    }
                  }
                - LogGroup: !Ref ApiLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 102,
                    "width": 9,
                    "height": 3,
                    "properties": {
                      "markdown": "\n_Fatal errors from ECS API._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 105,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "query": "SOURCE '${LogGroup}' | fields tenant as Tenant, message as ErrorMessage | filter level='error' and ispresent(Tenant) | display Tenant, ErrorMessage | stats count() as Count by Tenant, ErrorMessage | sort Count desc | limit 20",
                      "region": "${AWS::Region}",
                      "stacked": false,
                      "title": "API Errors by Workspace and Error Message",
                      "view": "table"
                    }
                  }
                - LogGroup: !Ref ApiLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 105,
                    "width": 9,
                    "height": 6,
                    "properties": {
                      "markdown": "_Non-fatal errors count by Tenants (not crashes) from ECS API._\n\n**Healthy**: Errors are normal, but should usually be small counts of a range of items.\n\n**Recurring problem**: Large number of errors of a particular type, should be reported to Support."
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 111,
                    "width": 15,
                    "height": 3,
                    "properties": {
                      "query": "SOURCE '${LogGroup}' | filter @message like /Uncaught Exception/\n| stats count(*) as Exceptions by bin(1h) as Period\n| sort Exceptions desc | limit 10",
                      "region": "${AWS::Region}",
                      "title": "Worker Crashes"
                    }
                  }
                - LogGroup: !Ref WorkerLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 111,
                    "width": 9,
                    "height": 3,
                    "properties": {
                      "markdown": "\n_Fatal errors from Worker Lambda._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 114,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "query": "SOURCE '${LogGroup}' | fields tenant as Tenant, message as ErrorMessage | filter level='error' and ispresent(Tenant) | display Tenant, ErrorMessage | stats count() as Count by Tenant, ErrorMessage | sort Count desc | limit 20",
                      "region": "${AWS::Region}",
                      "stacked": false,
                      "title": "Worker Errors by Workspace and Error Message",
                      "view": "table"
                    }
                  }
                - LogGroup: !Ref WorkerLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 114,
                    "width": 9,
                    "height": 6,
                    "properties": {
                        "markdown": "\n_Non-fatal errors count by Tenants (not crashes) from Worker Lambda._\n\n**Healthy**: Errors are normal, but should usually be small counts of a range of items.\n\n**Recurring problem**: Large number of errors of a particular type, should be reported to Support.\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 120,
                    "width": 15,
                    "height": 3,
                    "properties": {
                      "query": "SOURCE '${LogGroup}' | filter @message like /Uncaught Exception/\n| stats count(*) as Exceptions by bin(1h) as Period\n| sort Exceptions desc | limit 10",
                      "region": "${AWS::Region}",
                      "title": "Event Uncaught Exception"
                    }
                  }
                - LogGroup: !Ref EventLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 120,
                    "width": 9,
                    "height": 3,
                    "properties": {
                      "markdown": "\n_Fatal errors from ECS Events._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 123,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "query": "SOURCE '${LogGroup}' | fields tenant as Tenant, message as ErrorMessage | filter level='error' and ispresent(Tenant) | display Tenant, ErrorMessage | stats count() as Count by Tenant, ErrorMessage | sort Count desc | limit 20",
                      "region": "${AWS::Region}",
                      "stacked": false,
                      "title": "Event Errors by Workspace and Error Message",
                      "view": "table"
                    }
                  }
                - LogGroup: !Ref EventLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 123,
                    "width": 9,
                    "height": 6,
                    "properties": {
                        "markdown": "\n_Non-fatal errors count by Tenants (not crashes) from ECS Events._\n\n**Healthy**: Errors are normal, but should usually be small counts of a range of items.\n\n**Recurring problem**: Large number of errors of a particular type, should be reported to Support.\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 129,
                    "width": 15,
                    "height": 3,
                    "properties": {
                      "query": "SOURCE '${LogGroup}' | filter @message like /Uncaught Exception/\n| stats count(*) as Exceptions by bin(1h) as Period\n| sort Exceptions desc | limit 10",
                      "region": "${AWS::Region}",
                      "title": "Events DLQ Uncaught Exception"
                    }
                  }
                - LogGroup: !Ref EventsDlqLambdaLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 129,
                    "width": 9,
                    "height": 3,
                    "properties": {
                      "markdown": "\n_Fatal errors from Events DLQ._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 132,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "query": "SOURCE '${LogGroup}' | fields tenant as Tenant, message as ErrorMessage | filter level='error' and ispresent(Tenant) | display Tenant, ErrorMessage | stats count() as Count by Tenant, ErrorMessage | sort Count desc | limit 20",
                      "region": "${AWS::Region}",
                      "stacked": false,
                      "title": "Events DLQ Errors by Workspace and Error Message",
                      "view": "table"
                    }
                  }
                - LogGroup: !Ref EventsDlqLambdaLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 132,
                    "width": 9,
                    "height": 6,
                    "properties": {
                        "markdown": "\n_Non-fatal errors count by Tenants (not crashes) from Events DLQ._\n\n**Healthy**: Errors are normal, but should usually be small counts of a range of items.\n\n**Recurring problem**: Large number of errors of a particular type, should be reported to Support.\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 138,
                    "width": 15,
                    "height": 3,
                    "properties": {
                      "query": "SOURCE '${LogGroup}' | filter @message like /Uncaught Exception/\n| stats count(*) as Exceptions by bin(1h) as Period\n| sort Exceptions desc | limit 10",
                      "region": "${AWS::Region}",
                      "title": "Runnable DLQ Uncaught Exception"
                    }
                  }
                - LogGroup: !Ref RunnableDlqLambdaLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 138,
                    "width": 9,
                    "height": 3,
                    "properties": {
                      "markdown": "\n_Fatal errors from Runnable Dlq._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 141,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "query": "SOURCE '${LogGroup}' | fields tenant as Tenant, message as ErrorMessage | filter level='error' and ispresent(Tenant) | display Tenant, ErrorMessage | stats count() as Count by Tenant, ErrorMessage | sort Count desc | limit 20",
                      "region": "${AWS::Region}",
                      "stacked": false,
                      "title": "Runnable Dlq Errors by Workspace and Error Message",
                      "view": "table"
                    }
                  }
                - LogGroup: !Ref RunnableDlqLambdaLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 141,
                    "width": 9,
                    "height": 6,
                    "properties": {
                        "markdown": "\n_Non-fatal errors count by Tenants (not crashes) from Runnable Dlq._\n\n**Healthy**: Errors are normal, but should usually be small counts of a range of items.\n\n**Recurring problem**: Large number of errors of a particular type, should be reported to Support.\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 147,
                    "width": 15,
                    "height": 3,
                    "properties": {
                      "query": "SOURCE '${LogGroup}' | filter @message like /Uncaught Exception/\n| stats count(*) as Exceptions by bin(1h) as Period\n| sort Exceptions desc | limit 10",
                      "region": "${AWS::Region}",
                      "title": "Worker Retry Uncaught Exception"
                    }
                  }
                - LogGroup: !Ref WorkerRetryLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 147,
                    "width": 9,
                    "height": 3,
                    "properties": {
                      "markdown": "\n_Fatal errors from Worker Retry Lambda._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 150,
                    "width": 15,
                    "height": 6,
                    "properties": {
                      "query": "SOURCE '${LogGroup}' | fields tenant as Tenant, message as ErrorMessage | filter level='error' and ispresent(Tenant) | display Tenant, ErrorMessage | stats count() as Count by Tenant, ErrorMessage | sort Count desc | limit 20",
                      "region": "${AWS::Region}",
                      "stacked": false,
                      "title": "Worker Retry by Workspace and Error Message",
                      "view": "table"
                    }
                  }
                - LogGroup: !Ref WorkerRetryLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 150,
                    "width": 9,
                    "height": 6,
                    "properties": {
                        "markdown": "\n_Non-fatal errors count by Tenants (not crashes) from Worker Retry._\n\n**Healthy**: Errors are normal, but should usually be small counts of a range of items.\n\n**Recurring problem**: Large number of errors of a particular type, should be reported to Support.\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 156,
                    "width": 15,
                    "height": 4,
                    "properties": {
                        "query": "SOURCE '${LogGroup}' | fields @timestamp, @message\n| filter message=\"received SQS message\" and ispresent(tenant)\n| stats count() as Count by tenant as Tenant\n| sort Count desc",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "View All Messages By Workspace",
                        "view": "table"
                    }
                  }
                - LogGroup: !Ref WorkerLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 156,
                    "width": 9,
                    "height": 4,
                    "properties": {
                        "markdown": "\n_View all messages by workspace, along with the log stream.\nThis is helpful if you're running multiple workspaces in your installation and want to see the distribution of events amongst them._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 160,
                    "width": 15,
                    "height": 4,
                    "properties": {
                        "query": "SOURCE '${LogGroup}' | fields @timestamp, @message | filter message='received SQS message' and ispresent(data.msgObj.type) | stats count() as Count by data.msgObj.type as MessageType | sort Count desc",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "View All Messages by Message Type",
                        "view": "table"
                    }
                  }
                - LogGroup: !Ref WorkerLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 160,
                    "width": 9,
                    "height": 4,
                    "properties": {
                        "markdown": "\n_View all messages by workspace and message type, along with the log stream.\nThis is helpful to start to see what's being processed, for example, ticks, external events, etc._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 164,
                    "width": 15,
                    "height": 4,
                    "properties": {
                        "query": "SOURCE '${LogGroup}' | filter message='received SQS message' and ispresent(data.msgObj.meta.eventRaw) | filter data.msgObj.type='event.turbot.com:External' | stats count() as Count by data.msgObj.meta.eventRaw as Event | sort Count desc",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "View All AWS External Messages by Raw Event",
                        "view": "table"
                    }
                  }
                - LogGroup: !Ref WorkerLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 164,
                    "width": 9,
                    "height": 4,
                    "properties": {
                        "markdown": "\n_View all external messages by workspace and raw event, along with the log stream.\nThis is helpful to see what external messages are being processed. The raw event field should give you a useful event name from the data provider (e.g., ec2:CreateTags)._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 168,
                    "width": 15,
                    "height": 4,
                    "properties": {
                        "query": "SOURCE '${LogGroup}' | fields @timestamp, @message | filter message='received SQS message' and ispresent(data.msgObj.payload.account) | filter data.msgObj.type='event.turbot.com:External' | stats count() as Count by data.msgObj.payload.account as AccountId, data.msgObj.meta.tenantId as Tenant | sort Count desc",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "View All AWS External Messages by AWS Account ID",
                        "view": "table"
                    }
                  }
                - LogGroup: !Ref WorkerLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 168,
                    "width": 9,
                    "height": 4,
                    "properties": {
                        "markdown": "\n_View all external messages by Workspace and Account Id, along with the log stream.\nThis is helpful for seeing which AWS accounts are sending the most events to Turbot. Note: I didn't test this in an event with other data providers._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 172,
                    "width": 15,
                    "height": 4,
                    "properties": {
                        "query": "SOURCE '${LogGroup}' | fields @timestamp, @message | filter message='received SQS message' and ispresent(data.msgObj.payload.account) and ispresent(data.msgObj.payload.source) | filter data.msgObj.type='event.turbot.com:External' | stats count() as Count by data.msgObj.payload.source as Source, data.msgObj.payload.account as AccountId, data.msgObj.meta.tenantId as Tenant | sort Count desc",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "View AWS External Messages by AWS Account ID and Event Source",
                        "view": "table"
                    }
                  }
                - LogGroup: !Ref WorkerLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 172,
                    "width": 9,
                    "height": 4,
                    "properties": {
                        "markdown": "\n_View all external messages by Account Id and Event Source._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 176,
                    "width": 15,
                    "height": 4,
                    "properties": {
                        "query": "SOURCE '${LogGroup}' | fields @timestamp, @message | filter message='received SQS message' and ispresent(data.msgObj.type) and data.msgObj.type = 'tick.turbot.com:Now' and ispresent(data.msgObj.meta.controlId) | stats count() as Count by tenant as Tenant, data.msgObj.meta.resourceId as ResourceID, data.msgObj.meta.controlId as ControlID | sort Count desc",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "View Message Count by Control Id",
                        "view": "table"
                    }
                  }
                - LogGroup: !Ref WorkerLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 176,
                    "width": 9,
                    "height": 4,
                    "properties": {
                        "markdown": "\n_View all controls run by tick.turbot.com:Next._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 180,
                    "width": 15,
                    "height": 4,
                    "properties": {
                        "query": "SOURCE '${LogGroup}' | fields @timestamp, @message | filter message='received SQS message' and ispresent(data.msgObj.type) and data.msgObj.type = 'process.turbot.com:terminate' and ispresent(data.msgObj.meta.runnableTypeUri) | stats count() as Count by data.msgObj.meta.runnableTypeUri as RunnableTypeUri | sort Count desc",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "View Message Count by RunnableTypeURIs",
                        "view": "table"
                    }
                  }
                - LogGroup: !Ref WorkerLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 180,
                    "width": 9,
                    "height": 4,
                    "properties": {
                        "markdown": "\n_View Message Count by RunnableTypeURIs._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 184,
                    "width": 15,
                    "height": 4,
                    "properties": {
                        "query": "SOURCE '${LogGroup}' | fields meta.tenantSchema, meta.runnableTypeUri, meta.parentControlId | filter meta.runType='action' | stats count() as Count by meta.tenantSchema,meta.runnableTypeUri,meta.parentControlId | sort Count desc | limit 20",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "View Actions in Runnable DLQ",
                        "view": "table"
                    }
                  }
                - LogGroup: !Ref RunnableDlqLambdaLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 184,
                    "width": 9,
                    "height": 4,
                    "properties": {
                        "markdown": "\n_View Actions in Runnable DLQ._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 188,
                    "width": 15,
                    "height": 4,
                    "properties": {
                        "query": "SOURCE '${LogGroup}' | fields msg.messageAttributes.ErrorMessage.stringValue | filter ispresent(msg.messageId) | stats count() as Count by msg.messageAttributes.ErrorMessage.stringValue | sort Count desc | limit 20",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "View Message in Runnable DLQ",
                        "view": "table"
                    }
                  }
                - LogGroup: !Ref RunnableDlqLambdaLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 188,
                    "width": 9,
                    "height": 4,
                    "properties": {
                        "markdown": "\n_View Message in Runnable DLQ._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 192,
                    "width": 15,
                    "height": 4,
                    "properties": {
                        "query": "SOURCE '${LogGroup}' | fields tenant as Tenant, data.msgAttributes.controlTypeUri as ControlType, data.msgAttributes.version as Version | sort @timestamp desc | filter message = 'Launching Mod Lambda function' | stats count() as Count by tenant, data.msgAttributes.controlTypeUri, data.msgAttributes.version | sort Count desc",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Mod lambda execution stats",
                        "view": "table"
                    }
                  }
                - LogGroup: !Ref WorkerLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 192,
                    "width": 9,
                    "height": 4,
                    "properties": {
                        "markdown": "\n_Mod lambda execution stats._\n"
                    }
                  }
                - {}

              - !Sub
                - |
                  {
                    "type": "log",
                    "x": 0,
                    "y": 196,
                    "width": 15,
                    "height": 4,
                    "properties": {
                        "query": "SOURCE '${LogGroup}' | fields tenant, message, data.error.message | sort @timestamp desc | filter level = 'error' and data.type = 'databaseError' | stats count() as Count by tenant, message, data.error.message | sort Count desc",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Database Error Stats",
                        "view": "table"
                    }
                  }
                - LogGroup: !Ref WorkerLogGroup

              - !Sub
                - |
                  {
                    "type": "text",
                    "x": 15,
                    "y": 196,
                    "width": 9,
                    "height": 4,
                    "properties": {
                        "markdown": "\n_Database Error Stats._\n"
                    }
                  }
                - {}
          - |
            ] }

#
# Outputs
#

Outputs:

  ReleaseVersion:
    Description: Version of the Release
    Value: !FindInMap [Constants, Product, Version]

  LoadBalancerDNS:
    Description: ALB DNS Endpoint
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub
        - "${ResourceNamePrefix}-${SafeVersion}-lb"
        - SafeVersion: !Join [ "-", !Split [ ".", !Join [ "-", !Split [ "_", !FindInMap [Constants, Product, Version] ] ] ] ]